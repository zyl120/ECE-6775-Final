-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_mmul_helper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ii : IN STD_LOGIC_VECTOR (4 downto 0);
    jj : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of block_mmul_helper is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln14_reg_1006 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_2_fu_320_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_2_reg_883 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_addr_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_4_fu_351_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_4_reg_898 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_addr_1_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_6_fu_382_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_6_reg_913 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_addr_2_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_8_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_8_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_3_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_4_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_5_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_10_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_10_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_6_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_7_reg_963 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_8_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_12_fu_577_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_12_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_9_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_10_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_addr_11_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_638_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1001 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_5_fu_674_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_5_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_6_fu_679_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_6_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_4_fu_730_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_4_reg_1044 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln15_fu_747_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_load_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_fu_754_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_reg_1079 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_1_fu_761_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_1_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_803_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_reg_1094 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_809_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_1_reg_1099 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_1_fu_768_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_1_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_2_fu_775_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_2_reg_1112 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_3_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_3_reg_1119 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_2_reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_3_reg_1131 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_4_reg_1136 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_5_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_839_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_6_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_845_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_7_reg_1151 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_8_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_857_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_9_reg_1161 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_10_fu_789_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_10_reg_1166 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_11_fu_796_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_11_reg_1171 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_10_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_11_reg_1181 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_0_reg_249 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln18_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_1_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_2_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_4_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_5_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_6_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_7_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_8_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_9_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_10_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln18_11_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_1_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_2_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_1_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_3_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_4_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln16_2_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_fu_290_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_306_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_1_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_3_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln18_5_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_1_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_1_fu_370_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln18_7_fu_386_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_2_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_415_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_431_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_9_fu_427_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_1_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_3_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_4_fu_456_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_5_fu_467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_1_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_492_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_508_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_11_fu_504_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_2_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_6_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_7_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_8_fu_544_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_2_fu_555_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_569_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_585_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_13_fu_581_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_3_fu_593_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_9_fu_599_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_10_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_11_fu_621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_3_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_4_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_692_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_684_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln16_fu_700_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln16_fu_704_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_2_fu_710_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_3_fu_720_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component block_mmul_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    block_mmul_mac_mubkb_U1 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1064,
        din1 => B_load_reg_1071,
        din2 => grp_fu_268_p3,
        dout => grp_fu_803_p3);

    block_mmul_mac_mubkb_U2 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1064,
        din1 => select_ln16_reg_1079,
        din2 => grp_fu_275_p3,
        dout => grp_fu_809_p3);

    block_mmul_mac_mubkb_U3 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1064,
        din1 => select_ln16_1_reg_1104,
        din2 => grp_fu_268_p3,
        dout => grp_fu_815_p3);

    block_mmul_mac_mubkb_U4 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1087,
        din1 => B_load_reg_1071,
        din2 => grp_fu_275_p3,
        dout => grp_fu_821_p3);

    block_mmul_mac_mubkb_U5 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1087,
        din1 => select_ln16_reg_1079,
        din2 => grp_fu_268_p3,
        dout => grp_fu_827_p3);

    block_mmul_mac_mubkb_U6 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1087,
        din1 => select_ln16_1_reg_1104,
        din2 => grp_fu_275_p3,
        dout => grp_fu_833_p3);

    block_mmul_mac_mubkb_U7 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1112,
        din1 => B_load_reg_1071,
        din2 => grp_fu_268_p3,
        dout => grp_fu_839_p3);

    block_mmul_mac_mubkb_U8 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1112,
        din1 => select_ln16_reg_1079,
        din2 => grp_fu_275_p3,
        dout => grp_fu_845_p3);

    block_mmul_mac_mubkb_U9 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1112,
        din1 => select_ln16_1_reg_1104,
        din2 => grp_fu_268_p3,
        dout => grp_fu_851_p3);

    block_mmul_mac_mubkb_U10 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1119,
        din1 => B_load_reg_1071,
        din2 => grp_fu_275_p3,
        dout => grp_fu_857_p3);

    block_mmul_mac_mubkb_U11 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1119,
        din1 => select_ln16_reg_1079,
        din2 => select_ln14_10_reg_1166,
        dout => grp_fu_863_p3);

    block_mmul_mac_mubkb_U12 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1119,
        din1 => select_ln16_1_reg_1104,
        din2 => select_ln14_11_reg_1171,
        dout => grp_fu_868_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_0_reg_249 <= k_reg_1001;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_0_reg_249 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                B_load_reg_1071 <= B_q0;
                select_ln15_1_reg_1087 <= select_ln15_1_fu_761_p3;
                select_ln15_reg_1064 <= select_ln15_fu_747_p3;
                select_ln16_reg_1079 <= select_ln16_fu_754_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_632_p2 = ap_const_lv1_0) and (tmp_9_reg_948 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln15_5_reg_1024 <= add_ln15_5_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_632_p2 = ap_const_lv1_0) and (tmp_12_reg_973 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln15_6_reg_1029 <= add_ln15_6_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_1_reg_908 = ap_const_lv1_1))) then
                add_ln16_4_reg_1044 <= add_ln16_4_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln17_10_reg_1176 <= grp_fu_863_p3;
                add_ln17_11_reg_1181 <= grp_fu_868_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln17_1_reg_1099 <= grp_fu_809_p3;
                add_ln17_reg_1094 <= grp_fu_803_p3;
                select_ln15_2_reg_1112 <= select_ln15_2_fu_775_p3;
                select_ln15_3_reg_1119 <= select_ln15_3_fu_782_p3;
                select_ln16_1_reg_1104 <= select_ln16_1_fu_768_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln17_2_reg_1126 <= grp_fu_815_p3;
                add_ln17_3_reg_1131 <= grp_fu_821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln17_4_reg_1136 <= grp_fu_827_p3;
                add_ln17_5_reg_1141 <= grp_fu_833_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln17_6_reg_1146 <= grp_fu_839_p3;
                add_ln17_7_reg_1151 <= grp_fu_845_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln17_8_reg_1156 <= grp_fu_851_p3;
                add_ln17_9_reg_1161 <= grp_fu_857_p3;
                select_ln14_10_reg_1166 <= select_ln14_10_fu_789_p3;
                select_ln14_11_reg_1171 <= select_ln14_11_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln14_reg_1006 <= icmp_ln14_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln16_1_reg_908 <= icmp_ln16_1_fu_376_p2;
                icmp_ln16_reg_893 <= icmp_ln16_fu_345_p2;
                out_addr_10_reg_988 <= sext_ln18_10_fu_616_p1(8 - 1 downto 0);
                out_addr_11_reg_993 <= sext_ln18_11_fu_627_p1(8 - 1 downto 0);
                out_addr_1_reg_903 <= sext_ln18_1_fu_365_p1(8 - 1 downto 0);
                out_addr_2_reg_918 <= sext_ln18_2_fu_396_p1(8 - 1 downto 0);
                out_addr_3_reg_933 <= sext_ln18_3_fu_451_p1(8 - 1 downto 0);
                out_addr_4_reg_938 <= sext_ln18_4_fu_462_p1(8 - 1 downto 0);
                out_addr_5_reg_943 <= sext_ln18_5_fu_473_p1(8 - 1 downto 0);
                out_addr_6_reg_958 <= sext_ln18_6_fu_528_p1(8 - 1 downto 0);
                out_addr_7_reg_963 <= sext_ln18_7_fu_539_p1(8 - 1 downto 0);
                out_addr_8_reg_968 <= sext_ln18_8_fu_550_p1(8 - 1 downto 0);
                out_addr_9_reg_983 <= sext_ln18_9_fu_605_p1(8 - 1 downto 0);
                out_addr_reg_888 <= sext_ln18_fu_334_p1(8 - 1 downto 0);
                tmp_12_reg_973 <= add_ln15_2_fu_555_p2(4 downto 4);
                tmp_3_reg_873 <= ii(4 downto 4);
                tmp_6_reg_923 <= add_ln15_fu_401_p2(4 downto 4);
                tmp_9_reg_948 <= add_ln15_1_fu_478_p2(4 downto 4);
                    zext_ln18_10_reg_953(6 downto 2) <= zext_ln18_10_fu_500_p1(6 downto 2);
                    zext_ln18_12_reg_978(6 downto 2) <= zext_ln18_12_fu_577_p1(6 downto 2);
                    zext_ln18_2_reg_883(3 downto 0) <= zext_ln18_2_fu_320_p1(3 downto 0);
                    zext_ln18_4_reg_898(3 downto 0) <= zext_ln18_4_fu_351_p1(3 downto 0);
                    zext_ln18_6_reg_913(3 downto 0) <= zext_ln18_6_fu_382_p1(3 downto 0);
                    zext_ln18_8_reg_928(6 downto 2) <= zext_ln18_8_fu_423_p1(6 downto 2);
                    zext_ln18_reg_878(6 downto 2) <= zext_ln18_fu_298_p1(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_1001 <= k_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln14_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln14_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln14_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln14_reg_1006 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_260 <= out_r_q0;
                reg_264 <= out_r_q1;
            end if;
        end if;
    end process;
    zext_ln18_reg_878(1 downto 0) <= "00";
    zext_ln18_reg_878(7) <= '0';
    zext_ln18_2_reg_883(6 downto 4) <= "000";
    zext_ln18_4_reg_898(6 downto 4) <= "000";
    zext_ln18_6_reg_913(6 downto 4) <= "000";
    zext_ln18_8_reg_928(1 downto 0) <= "00";
    zext_ln18_8_reg_928(7) <= '0';
    zext_ln18_10_reg_953(1 downto 0) <= "00";
    zext_ln18_10_reg_953(7) <= '0';
    zext_ln18_12_reg_978(1 downto 0) <= "00";
    zext_ln18_12_reg_978(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_632_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln15_1_fu_659_p1, zext_ln15_3_fu_735_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln15_3_fu_735_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= zext_ln15_1_fu_659_p1(6 - 1 downto 0);
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln15_2_fu_669_p1, zext_ln15_4_fu_739_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= zext_ln15_4_fu_739_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address1 <= zext_ln15_2_fu_669_p1(6 - 1 downto 0);
        else 
            A_address1 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, sext_ln16_fu_715_p1, sext_ln16_2_fu_743_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address0 <= sext_ln16_2_fu_743_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= sext_ln16_fu_715_p1(6 - 1 downto 0);
        else 
            B_address0 <= "XXXXXX";
        end if; 
    end process;

    B_address1 <= sext_ln16_1_fu_725_p1(6 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_1_fu_478_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv5_2));
    add_ln15_2_fu_555_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv5_3));
    add_ln15_3_fu_654_p2 <= std_logic_vector(unsigned(zext_ln18_reg_878) + unsigned(zext_ln15_fu_650_p1));
    add_ln15_4_fu_664_p2 <= std_logic_vector(unsigned(zext_ln18_8_reg_928) + unsigned(zext_ln15_fu_650_p1));
    add_ln15_5_fu_674_p2 <= std_logic_vector(unsigned(zext_ln18_10_reg_953) + unsigned(zext_ln15_fu_650_p1));
    add_ln15_6_fu_679_p2 <= std_logic_vector(unsigned(zext_ln18_12_reg_978) + unsigned(zext_ln15_fu_650_p1));
    add_ln15_fu_401_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv5_1));
    add_ln16_1_fu_370_p2 <= std_logic_vector(unsigned(jj) + unsigned(ap_const_lv4_2));
    add_ln16_2_fu_710_p2 <= std_logic_vector(unsigned(sub_ln16_fu_704_p2) + unsigned(zext_ln18_2_reg_883));
    add_ln16_3_fu_720_p2 <= std_logic_vector(unsigned(sub_ln16_fu_704_p2) + unsigned(zext_ln18_4_reg_898));
    add_ln16_4_fu_730_p2 <= std_logic_vector(unsigned(sub_ln16_fu_704_p2) + unsigned(zext_ln18_6_reg_913));
    add_ln16_fu_339_p2 <= std_logic_vector(unsigned(jj) + unsigned(ap_const_lv4_1));
    add_ln18_10_fu_610_p2 <= std_logic_vector(unsigned(sub_ln18_3_fu_593_p2) + unsigned(zext_ln18_5_fu_355_p1));
    add_ln18_11_fu_621_p2 <= std_logic_vector(unsigned(sub_ln18_3_fu_593_p2) + unsigned(zext_ln18_7_fu_386_p1));
    add_ln18_1_fu_359_p2 <= std_logic_vector(unsigned(sub_ln18_fu_314_p2) + unsigned(zext_ln18_5_fu_355_p1));
    add_ln18_2_fu_390_p2 <= std_logic_vector(unsigned(sub_ln18_fu_314_p2) + unsigned(zext_ln18_7_fu_386_p1));
    add_ln18_3_fu_445_p2 <= std_logic_vector(unsigned(sub_ln18_1_fu_439_p2) + unsigned(zext_ln18_3_fu_324_p1));
    add_ln18_4_fu_456_p2 <= std_logic_vector(unsigned(sub_ln18_1_fu_439_p2) + unsigned(zext_ln18_5_fu_355_p1));
    add_ln18_5_fu_467_p2 <= std_logic_vector(unsigned(sub_ln18_1_fu_439_p2) + unsigned(zext_ln18_7_fu_386_p1));
    add_ln18_6_fu_522_p2 <= std_logic_vector(unsigned(sub_ln18_2_fu_516_p2) + unsigned(zext_ln18_3_fu_324_p1));
    add_ln18_7_fu_533_p2 <= std_logic_vector(unsigned(sub_ln18_2_fu_516_p2) + unsigned(zext_ln18_5_fu_355_p1));
    add_ln18_8_fu_544_p2 <= std_logic_vector(unsigned(sub_ln18_2_fu_516_p2) + unsigned(zext_ln18_7_fu_386_p1));
    add_ln18_9_fu_599_p2 <= std_logic_vector(unsigned(sub_ln18_3_fu_593_p2) + unsigned(zext_ln18_3_fu_324_p1));
    add_ln18_fu_328_p2 <= std_logic_vector(unsigned(sub_ln18_fu_314_p2) + unsigned(zext_ln18_3_fu_324_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1006(0) = '1') else 
        reg_260;
    grp_fu_275_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1006(0) = '1') else 
        reg_264;
    icmp_ln10_fu_632_p2 <= "1" when (k_0_reg_249 = ap_const_lv3_4) else "0";
    icmp_ln14_fu_644_p2 <= "1" when (k_0_reg_249 = ap_const_lv3_0) else "0";
    icmp_ln16_1_fu_376_p2 <= "1" when (unsigned(add_ln16_1_fu_370_p2) < unsigned(ap_const_lv4_C)) else "0";
    icmp_ln16_fu_345_p2 <= "1" when (unsigned(add_ln16_fu_339_p2) < unsigned(ap_const_lv4_C)) else "0";
    k_fu_638_p2 <= std_logic_vector(unsigned(k_0_reg_249) + unsigned(ap_const_lv3_1));

    out_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, out_addr_reg_888, out_addr_2_reg_918, out_addr_4_reg_938, out_addr_6_reg_958, out_addr_8_reg_968, out_addr_10_reg_988, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_address0 <= out_addr_10_reg_988;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_address0 <= out_addr_8_reg_968;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            out_r_address0 <= out_addr_6_reg_958;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_address0 <= out_addr_4_reg_938;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_r_address0 <= out_addr_2_reg_918;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_address0 <= out_addr_reg_888;
        else 
            out_r_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, out_addr_1_reg_903, out_addr_3_reg_933, out_addr_5_reg_943, out_addr_7_reg_963, out_addr_9_reg_983, out_addr_11_reg_993, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_address1 <= out_addr_11_reg_993;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_address1 <= out_addr_9_reg_983;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            out_r_address1 <= out_addr_7_reg_963;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_address1 <= out_addr_5_reg_943;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_r_address1 <= out_addr_3_reg_933;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_address1 <= out_addr_1_reg_903;
        else 
            out_r_address1 <= "XXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(add_ln17_reg_1094, add_ln17_2_reg_1126, add_ln17_4_reg_1136, add_ln17_6_reg_1146, add_ln17_8_reg_1156, ap_CS_fsm_state8, add_ln17_10_reg_1176, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d0 <= add_ln17_10_reg_1176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d0 <= add_ln17_8_reg_1156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_d0 <= add_ln17_6_reg_1146;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_r_d0 <= add_ln17_4_reg_1136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_d0 <= add_ln17_2_reg_1126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_d0 <= add_ln17_reg_1094;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_d1_assign_proc : process(add_ln17_1_reg_1099, add_ln17_3_reg_1131, add_ln17_5_reg_1141, add_ln17_7_reg_1151, ap_CS_fsm_state8, add_ln17_9_reg_1161, ap_CS_fsm_state9, add_ln17_11_reg_1181, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d1 <= add_ln17_11_reg_1181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d1 <= add_ln17_9_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_d1 <= add_ln17_7_reg_1151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_r_d1 <= add_ln17_5_reg_1141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_r_d1 <= add_ln17_3_reg_1131;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_d1 <= add_ln17_1_reg_1099;
        else 
            out_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_10_fu_789_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1006(0) = '1') else 
        out_r_q0;
    select_ln14_11_fu_796_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1006(0) = '1') else 
        out_r_q1;
    select_ln15_1_fu_761_p3 <= 
        ap_const_lv16_0 when (tmp_6_reg_923(0) = '1') else 
        A_q1;
    select_ln15_2_fu_775_p3 <= 
        ap_const_lv16_0 when (tmp_9_reg_948(0) = '1') else 
        A_q0;
    select_ln15_3_fu_782_p3 <= 
        ap_const_lv16_0 when (tmp_12_reg_973(0) = '1') else 
        A_q1;
    select_ln15_fu_747_p3 <= 
        ap_const_lv16_0 when (tmp_3_reg_873(0) = '1') else 
        A_q0;
    select_ln16_1_fu_768_p3 <= 
        B_q0 when (icmp_ln16_1_reg_908(0) = '1') else 
        ap_const_lv16_0;
    select_ln16_fu_754_p3 <= 
        B_q1 when (icmp_ln16_reg_893(0) = '1') else 
        ap_const_lv16_0;
        sext_ln16_1_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_3_fu_720_p2),64));

        sext_ln16_2_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_4_reg_1044),64));

        sext_ln16_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln16_2_fu_710_p2),64));

        sext_ln18_10_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_10_fu_610_p2),64));

        sext_ln18_11_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_11_fu_621_p2),64));

        sext_ln18_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_1_fu_359_p2),64));

        sext_ln18_2_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_2_fu_390_p2),64));

        sext_ln18_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_3_fu_445_p2),64));

        sext_ln18_4_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_4_fu_456_p2),64));

        sext_ln18_5_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_5_fu_467_p2),64));

        sext_ln18_6_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_6_fu_522_p2),64));

        sext_ln18_7_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_7_fu_533_p2),64));

        sext_ln18_8_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_8_fu_544_p2),64));

        sext_ln18_9_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_9_fu_599_p2),64));

        sext_ln18_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln18_fu_328_p2),64));

    sub_ln16_fu_704_p2 <= std_logic_vector(unsigned(tmp_11_fu_684_p3) - unsigned(zext_ln16_fu_700_p1));
    sub_ln18_1_fu_439_p2 <= std_logic_vector(unsigned(tmp_5_fu_431_p3) - unsigned(zext_ln18_9_fu_427_p1));
    sub_ln18_2_fu_516_p2 <= std_logic_vector(unsigned(tmp_8_fu_508_p3) - unsigned(zext_ln18_11_fu_504_p1));
    sub_ln18_3_fu_593_p2 <= std_logic_vector(unsigned(tmp_10_fu_585_p3) - unsigned(zext_ln18_13_fu_581_p1));
    sub_ln18_fu_314_p2 <= std_logic_vector(unsigned(tmp_2_fu_306_p3) - unsigned(zext_ln18_1_fu_302_p1));
    tmp_10_fu_585_p3 <= (add_ln15_2_fu_555_p2 & ap_const_lv4_0);
    tmp_11_fu_684_p3 <= (k_0_reg_249 & ap_const_lv4_0);
    tmp_13_fu_692_p3 <= (k_0_reg_249 & ap_const_lv2_0);
    tmp_1_fu_290_p3 <= (ii & ap_const_lv2_0);
    tmp_2_fu_306_p3 <= (ii & ap_const_lv4_0);
    tmp_4_fu_415_p3 <= (add_ln15_fu_401_p2 & ap_const_lv2_0);
    tmp_5_fu_431_p3 <= (add_ln15_fu_401_p2 & ap_const_lv4_0);
    tmp_7_fu_492_p3 <= (add_ln15_1_fu_478_p2 & ap_const_lv2_0);
    tmp_8_fu_508_p3 <= (add_ln15_1_fu_478_p2 & ap_const_lv4_0);
    tmp_s_fu_569_p3 <= (add_ln15_2_fu_555_p2 & ap_const_lv2_0);
    zext_ln15_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_654_p2),64));
    zext_ln15_2_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_664_p2),64));
    zext_ln15_3_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_reg_1024),64));
    zext_ln15_4_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_reg_1029),64));
    zext_ln15_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_249),8));
    zext_ln16_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_692_p3),7));
    zext_ln18_10_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_492_p3),8));
    zext_ln18_11_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_492_p3),9));
    zext_ln18_12_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_569_p3),8));
    zext_ln18_13_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_569_p3),9));
    zext_ln18_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_290_p3),9));
    zext_ln18_2_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj),7));
    zext_ln18_3_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj),9));
    zext_ln18_4_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_339_p2),7));
    zext_ln18_5_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_339_p2),9));
    zext_ln18_6_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_370_p2),7));
    zext_ln18_7_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_370_p2),9));
    zext_ln18_8_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_415_p3),8));
    zext_ln18_9_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_415_p3),9));
    zext_ln18_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_290_p3),8));
end behav;
