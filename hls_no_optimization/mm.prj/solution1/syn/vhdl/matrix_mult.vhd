-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=35364,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=3,HLS_SYN_FF=339,HLS_SYN_LUT=749,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_674 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_270_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_679 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln16_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln18_1_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln18_1_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_2_fu_294_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_2_reg_689 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_310_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_697 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln17_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_3_fu_339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln18_3_reg_707 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_715 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln1_fu_360_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1_reg_720 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln22_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln24_1_fu_368_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln24_1_reg_725 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_2_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_2_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_738 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_3_fu_429_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_3_reg_748 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_756 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln33_fu_474_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_reg_761 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln29_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_fu_486_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_reg_770 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln35_fu_492_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_reg_775 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln30_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_buff_addr_1_reg_780 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_fu_512_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_788 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln32_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buff_load_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal b_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buff_load_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal accum_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_2_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_6_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_reg_831 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln40_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_605_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_reg_836 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_2_fu_617_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_2_reg_841 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_fu_633_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_849 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln41_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_662_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln42_reg_859 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_buff_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_buff_ce0 : STD_LOGIC;
    signal a_buff_we0 : STD_LOGIC;
    signal b_buff_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_buff_ce0 : STD_LOGIC;
    signal b_buff_we0 : STD_LOGIC;
    signal c_buff_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_buff_ce0 : STD_LOGIC;
    signal c_buff_we0 : STD_LOGIC;
    signal c_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_146 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal j2_0_reg_179 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_0_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_0_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal accum_0_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_0_reg_225 : STD_LOGIC_VECTOR (4 downto 0);
    signal i3_0_reg_236 : STD_LOGIC_VECTOR (4 downto 0);
    signal j4_0_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln18_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_5_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_3_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_6_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_5_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_2_fu_290_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln18_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln17_fu_300_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_1_fu_316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln18_3_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_fu_325_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln18_4_fu_335_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_2_fu_380_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_fu_390_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_1_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_3_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_fu_415_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_4_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_450_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_462_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln33_1_fu_470_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_fu_458_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_496_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_2_fu_518_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_1_fu_522_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_532_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_544_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln33_5_fu_552_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln33_4_fu_540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_2_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_3_fu_562_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_1_fu_613_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln42_4_fu_639_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln42_3_fu_643_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_fu_623_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_1_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_3_fu_658_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component matrix_mult_a_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_buff_U : component matrix_mult_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_buff_address0,
        ce0 => a_buff_ce0,
        we0 => a_buff_we0,
        d0 => a_q0,
        q0 => a_buff_q0);

    b_buff_U : component matrix_mult_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_buff_address0,
        ce0 => b_buff_ce0,
        we0 => b_buff_we0,
        d0 => b_q0,
        q0 => b_buff_q0);

    c_buff_U : component matrix_mult_a_buff
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_buff_address0,
        ce0 => c_buff_ce0,
        we0 => c_buff_we0,
        d0 => accum_0_reg_212,
        q0 => c_buff_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    accum_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                accum_0_reg_212 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                accum_0_reg_212 <= accum_fu_576_p2;
            end if; 
        end if;
    end process;

    i1_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_168 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_394_p2 = ap_const_lv1_1))) then 
                i1_0_reg_168 <= i_1_reg_715;
            end if; 
        end if;
    end process;

    i3_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln29_fu_438_p2 = ap_const_lv1_1))) then 
                i3_0_reg_236 <= ap_const_lv5_0;
            elsif (((icmp_ln41_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i3_0_reg_236 <= i_2_reg_826;
            end if; 
        end if;
    end process;

    i_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_146 <= i_reg_674;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_146 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j2_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_0_reg_179 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j2_0_reg_179 <= j_1_reg_738;
            end if; 
        end if;
    end process;

    j4_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j4_0_reg_247 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j4_0_reg_247 <= j_2_reg_849;
            end if; 
        end if;
    end process;

    j_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_157 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_157 <= j_reg_697;
            end if; 
        end if;
    end process;

    m_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_0_reg_190 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_480_p2 = ap_const_lv1_1))) then 
                m_0_reg_190 <= m_reg_756;
            end if; 
        end if;
    end process;

    n_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                n_0_reg_225 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_0_reg_225 <= n_reg_788;
            end if; 
        end if;
    end process;

    o_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_0_reg_201 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln32_fu_506_p2 = ap_const_lv1_1))) then 
                o_0_reg_201 <= o_reg_770;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                a_buff_load_reg_803 <= a_buff_q0;
                b_buff_load_reg_808 <= b_buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln18_2_reg_689(9 downto 2) <= add_ln18_2_fu_294_p2(9 downto 2);
                    shl_ln18_1_reg_684(6 downto 2) <= shl_ln18_1_fu_278_p3(6 downto 2);
                    shl_ln_reg_679(8 downto 4) <= shl_ln_fu_270_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln18_3_reg_707 <= add_ln18_3_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    add_ln24_2_reg_730(9 downto 2) <= add_ln24_2_fu_384_p2(9 downto 2);
                    shl_ln1_reg_720(8 downto 4) <= shl_ln1_fu_360_p3(8 downto 4);
                    shl_ln24_1_reg_725(6 downto 2) <= shl_ln24_1_fu_368_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln24_3_reg_748 <= add_ln24_3_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    add_ln33_reg_761(9 downto 2) <= add_ln33_fu_474_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    add_ln42_2_reg_841(9 downto 2) <= add_ln42_2_fu_617_p2(9 downto 2);
                    tmp_6_reg_831(8 downto 4) <= tmp_6_fu_593_p3(8 downto 4);
                    tmp_7_reg_836(6 downto 2) <= tmp_7_fu_605_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln42_reg_859 <= add_ln42_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                c_buff_addr_1_reg_780 <= zext_ln35_1_fu_501_p1(9 - 1 downto 0);
                    zext_ln35_reg_775(4 downto 0) <= zext_ln35_fu_492_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_715 <= i_1_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_2_reg_826 <= i_2_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_674 <= i_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_738 <= j_1_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_2_reg_849 <= j_2_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_697 <= j_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_reg_756 <= m_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln33_reg_813 <= mul_ln33_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                n_reg_788 <= n_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                o_reg_770 <= o_fu_486_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_679(3 downto 0) <= "0000";
    shl_ln18_1_reg_684(1 downto 0) <= "00";
    add_ln18_2_reg_689(1 downto 0) <= "00";
    shl_ln1_reg_720(3 downto 0) <= "0000";
    shl_ln24_1_reg_725(1 downto 0) <= "00";
    add_ln24_2_reg_730(1 downto 0) <= "00";
    add_ln33_reg_761(1 downto 0) <= "00";
    zext_ln35_reg_775(9 downto 5) <= "00000";
    tmp_6_reg_831(3 downto 0) <= "0000";
    tmp_7_reg_836(1 downto 0) <= "00";
    add_ln42_2_reg_841(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_258_p2, ap_CS_fsm_state3, icmp_ln17_fu_304_p2, ap_CS_fsm_state5, icmp_ln22_fu_348_p2, ap_CS_fsm_state6, icmp_ln23_fu_394_p2, ap_CS_fsm_state8, icmp_ln29_fu_438_p2, ap_CS_fsm_state9, icmp_ln30_fu_480_p2, ap_CS_fsm_state10, icmp_ln32_fu_506_p2, ap_CS_fsm_state14, icmp_ln40_fu_581_p2, ap_CS_fsm_state15, icmp_ln41_fu_627_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln22_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_394_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln29_fu_438_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln30_fu_480_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln32_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln40_fu_581_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln41_fu_627_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= zext_ln18_1_fu_330_p1(9 - 1 downto 0);

    a_buff_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4, zext_ln18_5_fu_344_p1, zext_ln33_3_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_buff_address0 <= zext_ln33_3_fu_527_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_buff_address0 <= zext_ln18_5_fu_344_p1(9 - 1 downto 0);
        else 
            a_buff_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    a_buff_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            a_buff_ce0 <= ap_const_logic_1;
        else 
            a_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_buff_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_buff_we0 <= ap_const_logic_1;
        else 
            a_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    accum_fu_576_p2 <= std_logic_vector(unsigned(accum_0_reg_212) + unsigned(mul_ln33_reg_813));
    add_ln18_1_fu_316_p2 <= std_logic_vector(unsigned(zext_ln17_fu_300_p1) + unsigned(shl_ln18_1_reg_684));
    add_ln18_2_fu_294_p2 <= std_logic_vector(unsigned(zext_ln18_2_fu_290_p1) + unsigned(zext_ln18_fu_286_p1));
    add_ln18_3_fu_339_p2 <= std_logic_vector(unsigned(add_ln18_2_reg_689) + unsigned(zext_ln18_4_fu_335_p1));
    add_ln18_fu_325_p2 <= std_logic_vector(unsigned(shl_ln_reg_679) + unsigned(zext_ln18_3_fu_321_p1));
    add_ln24_1_fu_406_p2 <= std_logic_vector(unsigned(zext_ln23_fu_390_p1) + unsigned(shl_ln24_1_reg_725));
    add_ln24_2_fu_384_p2 <= std_logic_vector(unsigned(zext_ln24_2_fu_380_p1) + unsigned(zext_ln24_fu_376_p1));
    add_ln24_3_fu_429_p2 <= std_logic_vector(unsigned(add_ln24_2_reg_730) + unsigned(zext_ln24_4_fu_425_p1));
    add_ln24_fu_415_p2 <= std_logic_vector(unsigned(shl_ln1_reg_720) + unsigned(zext_ln24_3_fu_411_p1));
    add_ln33_1_fu_522_p2 <= std_logic_vector(unsigned(add_ln33_reg_761) + unsigned(zext_ln33_2_fu_518_p1));
    add_ln33_2_fu_556_p2 <= std_logic_vector(unsigned(zext_ln33_5_fu_552_p1) + unsigned(zext_ln33_4_fu_540_p1));
    add_ln33_3_fu_562_p2 <= std_logic_vector(unsigned(add_ln33_2_fu_556_p2) + unsigned(zext_ln35_reg_775));
    add_ln33_fu_474_p2 <= std_logic_vector(unsigned(zext_ln33_1_fu_470_p1) + unsigned(zext_ln33_fu_458_p1));
    add_ln35_fu_496_p2 <= std_logic_vector(unsigned(add_ln33_reg_761) + unsigned(zext_ln35_fu_492_p1));
    add_ln42_1_fu_653_p2 <= std_logic_vector(unsigned(zext_ln41_fu_623_p1) + unsigned(tmp_7_reg_836));
    add_ln42_2_fu_617_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_613_p1) + unsigned(zext_ln42_fu_601_p1));
    add_ln42_3_fu_643_p2 <= std_logic_vector(unsigned(add_ln42_2_reg_841) + unsigned(zext_ln42_4_fu_639_p1));
    add_ln42_fu_662_p2 <= std_logic_vector(unsigned(tmp_6_reg_831) + unsigned(zext_ln42_3_fu_658_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state14, icmp_ln40_fu_581_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln40_fu_581_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, icmp_ln40_fu_581_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln40_fu_581_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= zext_ln24_1_fu_420_p1(9 - 1 downto 0);

    b_buff_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state7, zext_ln24_5_fu_434_p1, zext_ln33_6_fu_567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_buff_address0 <= zext_ln33_6_fu_567_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_buff_address0 <= zext_ln24_5_fu_434_p1(9 - 1 downto 0);
        else 
            b_buff_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_buff_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            b_buff_ce0 <= ap_const_logic_1;
        else 
            b_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_buff_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_buff_we0 <= ap_const_logic_1;
        else 
            b_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= zext_ln42_2_fu_667_p1(9 - 1 downto 0);

    c_buff_address0_assign_proc : process(c_buff_addr_1_reg_780, ap_CS_fsm_state10, ap_CS_fsm_state15, zext_ln42_5_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_buff_address0 <= zext_ln42_5_fu_648_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c_buff_address0 <= c_buff_addr_1_reg_780;
        else 
            c_buff_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    c_buff_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            c_buff_ce0 <= ap_const_logic_1;
        else 
            c_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_buff_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln32_fu_506_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln32_fu_506_p2 = ap_const_lv1_1))) then 
            c_buff_we0 <= ap_const_logic_1;
        else 
            c_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= c_buff_q0;

    c_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_354_p2 <= std_logic_vector(unsigned(i1_0_reg_168) + unsigned(ap_const_lv5_1));
    i_2_fu_587_p2 <= std_logic_vector(unsigned(i3_0_reg_236) + unsigned(ap_const_lv5_1));
    i_fu_264_p2 <= std_logic_vector(unsigned(i_0_reg_146) + unsigned(ap_const_lv5_1));
    icmp_ln16_fu_258_p2 <= "1" when (i_0_reg_146 = ap_const_lv5_14) else "0";
    icmp_ln17_fu_304_p2 <= "1" when (j_0_reg_157 = ap_const_lv5_14) else "0";
    icmp_ln22_fu_348_p2 <= "1" when (i1_0_reg_168 = ap_const_lv5_14) else "0";
    icmp_ln23_fu_394_p2 <= "1" when (j2_0_reg_179 = ap_const_lv5_14) else "0";
    icmp_ln29_fu_438_p2 <= "1" when (m_0_reg_190 = ap_const_lv5_14) else "0";
    icmp_ln30_fu_480_p2 <= "1" when (o_0_reg_201 = ap_const_lv5_14) else "0";
    icmp_ln32_fu_506_p2 <= "1" when (n_0_reg_225 = ap_const_lv5_14) else "0";
    icmp_ln40_fu_581_p2 <= "1" when (i3_0_reg_236 = ap_const_lv5_14) else "0";
    icmp_ln41_fu_627_p2 <= "1" when (j4_0_reg_247 = ap_const_lv5_14) else "0";
    j_1_fu_400_p2 <= std_logic_vector(unsigned(j2_0_reg_179) + unsigned(ap_const_lv5_1));
    j_2_fu_633_p2 <= std_logic_vector(unsigned(j4_0_reg_247) + unsigned(ap_const_lv5_1));
    j_fu_310_p2 <= std_logic_vector(unsigned(j_0_reg_157) + unsigned(ap_const_lv5_1));
    m_fu_444_p2 <= std_logic_vector(unsigned(m_0_reg_190) + unsigned(ap_const_lv5_1));
    mul_ln33_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(b_buff_load_reg_808) * signed(a_buff_load_reg_803))), 32));
    n_fu_512_p2 <= std_logic_vector(unsigned(n_0_reg_225) + unsigned(ap_const_lv5_1));
    o_fu_486_p2 <= std_logic_vector(unsigned(o_0_reg_201) + unsigned(ap_const_lv5_1));
    shl_ln18_1_fu_278_p3 <= (i_0_reg_146 & ap_const_lv2_0);
    shl_ln1_fu_360_p3 <= (i1_0_reg_168 & ap_const_lv4_0);
    shl_ln24_1_fu_368_p3 <= (i1_0_reg_168 & ap_const_lv2_0);
    shl_ln_fu_270_p3 <= (i_0_reg_146 & ap_const_lv4_0);
    tmp_4_fu_450_p3 <= (m_0_reg_190 & ap_const_lv4_0);
    tmp_5_fu_462_p3 <= (m_0_reg_190 & ap_const_lv2_0);
    tmp_6_fu_593_p3 <= (i3_0_reg_236 & ap_const_lv4_0);
    tmp_7_fu_605_p3 <= (i3_0_reg_236 & ap_const_lv2_0);
    tmp_8_fu_532_p3 <= (n_0_reg_225 & ap_const_lv4_0);
    tmp_9_fu_544_p3 <= (n_0_reg_225 & ap_const_lv2_0);
    zext_ln17_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_157),7));
    zext_ln18_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_325_p2),64));
    zext_ln18_2_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln18_1_fu_278_p3),10));
    zext_ln18_3_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_1_fu_316_p2),9));
    zext_ln18_4_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_157),10));
    zext_ln18_5_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_3_reg_707),64));
    zext_ln18_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_270_p3),10));
    zext_ln23_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_179),7));
    zext_ln24_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_415_p2),64));
    zext_ln24_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln24_1_fu_368_p3),10));
    zext_ln24_3_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_406_p2),9));
    zext_ln24_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_179),10));
    zext_ln24_5_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_reg_748),64));
    zext_ln24_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_360_p3),10));
    zext_ln33_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_462_p3),10));
    zext_ln33_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_225),10));
    zext_ln33_3_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_1_fu_522_p2),64));
    zext_ln33_4_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_532_p3),10));
    zext_ln33_5_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_544_p3),10));
    zext_ln33_6_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_3_fu_562_p2),64));
    zext_ln33_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_450_p3),10));
    zext_ln35_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_496_p2),64));
    zext_ln35_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_0_reg_201),10));
    zext_ln41_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_247),7));
    zext_ln42_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_605_p3),10));
    zext_ln42_2_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_reg_859),64));
    zext_ln42_3_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_653_p2),9));
    zext_ln42_4_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_247),10));
    zext_ln42_5_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_3_fu_643_p2),64));
    zext_ln42_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_593_p3),10));
end behav;
