// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module block_mmul_helper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        out_r_q1,
        ii,
        jj
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
input  [15:0] A_q1;
output  [5:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
output  [5:0] B_address1;
output   B_ce1;
input  [15:0] B_q1;
output  [7:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [15:0] out_r_d0;
input  [15:0] out_r_q0;
output  [7:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [15:0] out_r_d1;
input  [15:0] out_r_q1;
input  [4:0] ii;
input  [3:0] jj;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg[5:0] A_address1;
reg A_ce1;
reg[5:0] B_address0;
reg B_ce0;
reg B_ce1;
reg[7:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[15:0] out_r_d0;
reg[7:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[15:0] out_r_d1;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_260;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln14_reg_1006;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [15:0] reg_264;
reg   [0:0] tmp_3_reg_873;
wire   [7:0] zext_ln18_fu_298_p1;
reg   [7:0] zext_ln18_reg_878;
wire   [6:0] zext_ln18_2_fu_320_p1;
reg   [6:0] zext_ln18_2_reg_883;
reg   [7:0] out_addr_reg_888;
wire   [0:0] icmp_ln16_fu_345_p2;
reg   [0:0] icmp_ln16_reg_893;
wire   [6:0] zext_ln18_4_fu_351_p1;
reg   [6:0] zext_ln18_4_reg_898;
reg   [7:0] out_addr_1_reg_903;
wire   [0:0] icmp_ln16_1_fu_376_p2;
reg   [0:0] icmp_ln16_1_reg_908;
wire   [6:0] zext_ln18_6_fu_382_p1;
reg   [6:0] zext_ln18_6_reg_913;
reg   [7:0] out_addr_2_reg_918;
reg   [0:0] tmp_6_reg_923;
wire   [7:0] zext_ln18_8_fu_423_p1;
reg   [7:0] zext_ln18_8_reg_928;
reg   [7:0] out_addr_3_reg_933;
reg   [7:0] out_addr_4_reg_938;
reg   [7:0] out_addr_5_reg_943;
reg   [0:0] tmp_9_reg_948;
wire   [7:0] zext_ln18_10_fu_500_p1;
reg   [7:0] zext_ln18_10_reg_953;
reg   [7:0] out_addr_6_reg_958;
reg   [7:0] out_addr_7_reg_963;
reg   [7:0] out_addr_8_reg_968;
reg   [0:0] tmp_12_reg_973;
wire   [7:0] zext_ln18_12_fu_577_p1;
reg   [7:0] zext_ln18_12_reg_978;
reg   [7:0] out_addr_9_reg_983;
reg   [7:0] out_addr_10_reg_988;
reg   [7:0] out_addr_11_reg_993;
wire   [2:0] k_fu_638_p2;
reg   [2:0] k_reg_1001;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_644_p2;
wire   [0:0] icmp_ln10_fu_632_p2;
wire   [7:0] add_ln15_5_fu_674_p2;
reg   [7:0] add_ln15_5_reg_1024;
wire   [7:0] add_ln15_6_fu_679_p2;
reg   [7:0] add_ln15_6_reg_1029;
wire   [6:0] add_ln16_4_fu_730_p2;
reg   [6:0] add_ln16_4_reg_1044;
wire  signed [15:0] select_ln15_fu_747_p3;
reg  signed [15:0] select_ln15_reg_1064;
reg  signed [15:0] B_load_reg_1071;
wire  signed [15:0] select_ln16_fu_754_p3;
reg  signed [15:0] select_ln16_reg_1079;
wire  signed [15:0] select_ln15_1_fu_761_p3;
reg  signed [15:0] select_ln15_1_reg_1087;
wire  signed [15:0] grp_fu_803_p3;
reg  signed [15:0] add_ln17_reg_1094;
wire  signed [15:0] grp_fu_809_p3;
reg  signed [15:0] add_ln17_1_reg_1099;
wire  signed [15:0] select_ln16_1_fu_768_p3;
reg  signed [15:0] select_ln16_1_reg_1104;
wire  signed [15:0] select_ln15_2_fu_775_p3;
reg  signed [15:0] select_ln15_2_reg_1112;
wire  signed [15:0] select_ln15_3_fu_782_p3;
reg  signed [15:0] select_ln15_3_reg_1119;
wire  signed [15:0] grp_fu_815_p3;
reg  signed [15:0] add_ln17_2_reg_1126;
wire  signed [15:0] grp_fu_821_p3;
reg  signed [15:0] add_ln17_3_reg_1131;
wire  signed [15:0] grp_fu_827_p3;
reg  signed [15:0] add_ln17_4_reg_1136;
wire  signed [15:0] grp_fu_833_p3;
reg  signed [15:0] add_ln17_5_reg_1141;
wire  signed [15:0] grp_fu_839_p3;
reg  signed [15:0] add_ln17_6_reg_1146;
wire  signed [15:0] grp_fu_845_p3;
reg  signed [15:0] add_ln17_7_reg_1151;
wire  signed [15:0] grp_fu_851_p3;
reg  signed [15:0] add_ln17_8_reg_1156;
wire    ap_CS_fsm_state8;
wire  signed [15:0] grp_fu_857_p3;
reg  signed [15:0] add_ln17_9_reg_1161;
wire   [15:0] select_ln14_10_fu_789_p3;
reg   [15:0] select_ln14_10_reg_1166;
wire   [15:0] select_ln14_11_fu_796_p3;
reg   [15:0] select_ln14_11_reg_1171;
wire  signed [15:0] grp_fu_863_p3;
reg  signed [15:0] add_ln17_10_reg_1176;
wire    ap_CS_fsm_state9;
wire  signed [15:0] grp_fu_868_p3;
reg  signed [15:0] add_ln17_11_reg_1181;
reg   [2:0] k_0_reg_249;
wire    ap_CS_fsm_state13;
wire  signed [63:0] sext_ln18_fu_334_p1;
wire  signed [63:0] sext_ln18_1_fu_365_p1;
wire  signed [63:0] sext_ln18_2_fu_396_p1;
wire  signed [63:0] sext_ln18_3_fu_451_p1;
wire  signed [63:0] sext_ln18_4_fu_462_p1;
wire  signed [63:0] sext_ln18_5_fu_473_p1;
wire  signed [63:0] sext_ln18_6_fu_528_p1;
wire  signed [63:0] sext_ln18_7_fu_539_p1;
wire  signed [63:0] sext_ln18_8_fu_550_p1;
wire  signed [63:0] sext_ln18_9_fu_605_p1;
wire  signed [63:0] sext_ln18_10_fu_616_p1;
wire  signed [63:0] sext_ln18_11_fu_627_p1;
wire   [63:0] zext_ln15_1_fu_659_p1;
wire   [63:0] zext_ln15_2_fu_669_p1;
wire  signed [63:0] sext_ln16_fu_715_p1;
wire  signed [63:0] sext_ln16_1_fu_725_p1;
wire   [63:0] zext_ln15_3_fu_735_p1;
wire   [63:0] zext_ln15_4_fu_739_p1;
wire  signed [63:0] sext_ln16_2_fu_743_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [6:0] tmp_1_fu_290_p3;
wire   [8:0] tmp_2_fu_306_p3;
wire   [8:0] zext_ln18_1_fu_302_p1;
wire   [8:0] sub_ln18_fu_314_p2;
wire   [8:0] zext_ln18_3_fu_324_p1;
wire   [8:0] add_ln18_fu_328_p2;
wire   [3:0] add_ln16_fu_339_p2;
wire   [8:0] zext_ln18_5_fu_355_p1;
wire   [8:0] add_ln18_1_fu_359_p2;
wire   [3:0] add_ln16_1_fu_370_p2;
wire   [8:0] zext_ln18_7_fu_386_p1;
wire   [8:0] add_ln18_2_fu_390_p2;
wire   [4:0] add_ln15_fu_401_p2;
wire   [6:0] tmp_4_fu_415_p3;
wire   [8:0] tmp_5_fu_431_p3;
wire   [8:0] zext_ln18_9_fu_427_p1;
wire   [8:0] sub_ln18_1_fu_439_p2;
wire   [8:0] add_ln18_3_fu_445_p2;
wire   [8:0] add_ln18_4_fu_456_p2;
wire   [8:0] add_ln18_5_fu_467_p2;
wire   [4:0] add_ln15_1_fu_478_p2;
wire   [6:0] tmp_7_fu_492_p3;
wire   [8:0] tmp_8_fu_508_p3;
wire   [8:0] zext_ln18_11_fu_504_p1;
wire   [8:0] sub_ln18_2_fu_516_p2;
wire   [8:0] add_ln18_6_fu_522_p2;
wire   [8:0] add_ln18_7_fu_533_p2;
wire   [8:0] add_ln18_8_fu_544_p2;
wire   [4:0] add_ln15_2_fu_555_p2;
wire   [6:0] tmp_s_fu_569_p3;
wire   [8:0] tmp_10_fu_585_p3;
wire   [8:0] zext_ln18_13_fu_581_p1;
wire   [8:0] sub_ln18_3_fu_593_p2;
wire   [8:0] add_ln18_9_fu_599_p2;
wire   [8:0] add_ln18_10_fu_610_p2;
wire   [8:0] add_ln18_11_fu_621_p2;
wire   [7:0] zext_ln15_fu_650_p1;
wire   [7:0] add_ln15_3_fu_654_p2;
wire   [7:0] add_ln15_4_fu_664_p2;
wire   [4:0] tmp_13_fu_692_p3;
wire   [6:0] tmp_11_fu_684_p3;
wire   [6:0] zext_ln16_fu_700_p1;
wire   [6:0] sub_ln16_fu_704_p2;
wire   [6:0] add_ln16_2_fu_710_p2;
wire   [6:0] add_ln16_3_fu_720_p2;
wire   [15:0] grp_fu_268_p3;
wire   [15:0] grp_fu_275_p3;
wire    ap_CS_fsm_state14;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U1(
    .din0(select_ln15_reg_1064),
    .din1(B_load_reg_1071),
    .din2(grp_fu_268_p3),
    .dout(grp_fu_803_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U2(
    .din0(select_ln15_reg_1064),
    .din1(select_ln16_reg_1079),
    .din2(grp_fu_275_p3),
    .dout(grp_fu_809_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U3(
    .din0(select_ln15_reg_1064),
    .din1(select_ln16_1_reg_1104),
    .din2(grp_fu_268_p3),
    .dout(grp_fu_815_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U4(
    .din0(select_ln15_1_reg_1087),
    .din1(B_load_reg_1071),
    .din2(grp_fu_275_p3),
    .dout(grp_fu_821_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U5(
    .din0(select_ln15_1_reg_1087),
    .din1(select_ln16_reg_1079),
    .din2(grp_fu_268_p3),
    .dout(grp_fu_827_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U6(
    .din0(select_ln15_1_reg_1087),
    .din1(select_ln16_1_reg_1104),
    .din2(grp_fu_275_p3),
    .dout(grp_fu_833_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U7(
    .din0(select_ln15_2_reg_1112),
    .din1(B_load_reg_1071),
    .din2(grp_fu_268_p3),
    .dout(grp_fu_839_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U8(
    .din0(select_ln15_2_reg_1112),
    .din1(select_ln16_reg_1079),
    .din2(grp_fu_275_p3),
    .dout(grp_fu_845_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U9(
    .din0(select_ln15_2_reg_1112),
    .din1(select_ln16_1_reg_1104),
    .din2(grp_fu_268_p3),
    .dout(grp_fu_851_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U10(
    .din0(select_ln15_3_reg_1119),
    .din1(B_load_reg_1071),
    .din2(grp_fu_275_p3),
    .dout(grp_fu_857_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U11(
    .din0(select_ln15_3_reg_1119),
    .din1(select_ln16_reg_1079),
    .din2(select_ln14_10_reg_1166),
    .dout(grp_fu_863_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U12(
    .din0(select_ln15_3_reg_1119),
    .din1(select_ln16_1_reg_1104),
    .din2(select_ln14_11_reg_1171),
    .dout(grp_fu_868_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_0_reg_249 <= k_reg_1001;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_0_reg_249 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_load_reg_1071 <= B_q0;
        select_ln15_1_reg_1087 <= select_ln15_1_fu_761_p3;
        select_ln15_reg_1064 <= select_ln15_fu_747_p3;
        select_ln16_reg_1079 <= select_ln16_fu_754_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_632_p2 == 1'd0) & (tmp_9_reg_948 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln15_5_reg_1024 <= add_ln15_5_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_632_p2 == 1'd0) & (tmp_12_reg_973 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln15_6_reg_1029 <= add_ln15_6_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln16_1_reg_908 == 1'd1))) begin
        add_ln16_4_reg_1044 <= add_ln16_4_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln17_10_reg_1176 <= grp_fu_863_p3;
        add_ln17_11_reg_1181 <= grp_fu_868_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln17_1_reg_1099 <= grp_fu_809_p3;
        add_ln17_reg_1094 <= grp_fu_803_p3;
        select_ln15_2_reg_1112 <= select_ln15_2_fu_775_p3;
        select_ln15_3_reg_1119 <= select_ln15_3_fu_782_p3;
        select_ln16_1_reg_1104 <= select_ln16_1_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln17_2_reg_1126 <= grp_fu_815_p3;
        add_ln17_3_reg_1131 <= grp_fu_821_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln17_4_reg_1136 <= grp_fu_827_p3;
        add_ln17_5_reg_1141 <= grp_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln17_6_reg_1146 <= grp_fu_839_p3;
        add_ln17_7_reg_1151 <= grp_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln17_8_reg_1156 <= grp_fu_851_p3;
        add_ln17_9_reg_1161 <= grp_fu_857_p3;
        select_ln14_10_reg_1166 <= select_ln14_10_fu_789_p3;
        select_ln14_11_reg_1171 <= select_ln14_11_fu_796_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln14_reg_1006 <= icmp_ln14_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln16_1_reg_908 <= icmp_ln16_1_fu_376_p2;
        icmp_ln16_reg_893 <= icmp_ln16_fu_345_p2;
        out_addr_10_reg_988 <= sext_ln18_10_fu_616_p1;
        out_addr_11_reg_993 <= sext_ln18_11_fu_627_p1;
        out_addr_1_reg_903 <= sext_ln18_1_fu_365_p1;
        out_addr_2_reg_918 <= sext_ln18_2_fu_396_p1;
        out_addr_3_reg_933 <= sext_ln18_3_fu_451_p1;
        out_addr_4_reg_938 <= sext_ln18_4_fu_462_p1;
        out_addr_5_reg_943 <= sext_ln18_5_fu_473_p1;
        out_addr_6_reg_958 <= sext_ln18_6_fu_528_p1;
        out_addr_7_reg_963 <= sext_ln18_7_fu_539_p1;
        out_addr_8_reg_968 <= sext_ln18_8_fu_550_p1;
        out_addr_9_reg_983 <= sext_ln18_9_fu_605_p1;
        out_addr_reg_888 <= sext_ln18_fu_334_p1;
        tmp_12_reg_973 <= add_ln15_2_fu_555_p2[32'd4];
        tmp_3_reg_873 <= ii[32'd4];
        tmp_6_reg_923 <= add_ln15_fu_401_p2[32'd4];
        tmp_9_reg_948 <= add_ln15_1_fu_478_p2[32'd4];
        zext_ln18_10_reg_953[6 : 2] <= zext_ln18_10_fu_500_p1[6 : 2];
        zext_ln18_12_reg_978[6 : 2] <= zext_ln18_12_fu_577_p1[6 : 2];
        zext_ln18_2_reg_883[3 : 0] <= zext_ln18_2_fu_320_p1[3 : 0];
        zext_ln18_4_reg_898[3 : 0] <= zext_ln18_4_fu_351_p1[3 : 0];
        zext_ln18_6_reg_913[3 : 0] <= zext_ln18_6_fu_382_p1[3 : 0];
        zext_ln18_8_reg_928[6 : 2] <= zext_ln18_8_fu_423_p1[6 : 2];
        zext_ln18_reg_878[6 : 2] <= zext_ln18_fu_298_p1[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_1001 <= k_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln14_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln14_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln14_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln14_reg_1006 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_260 <= out_r_q0;
        reg_264 <= out_r_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln15_3_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln15_1_fu_659_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = zext_ln15_4_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = zext_ln15_2_fu_669_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = sext_ln16_2_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address0 = sext_ln16_fu_715_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_address0 = out_addr_10_reg_988;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        out_r_address0 = out_addr_8_reg_968;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11))) begin
        out_r_address0 = out_addr_6_reg_958;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_address0 = out_addr_4_reg_938;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        out_r_address0 = out_addr_2_reg_918;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_address0 = out_addr_reg_888;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_address1 = out_addr_11_reg_993;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        out_r_address1 = out_addr_9_reg_983;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11))) begin
        out_r_address1 = out_addr_7_reg_963;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_address1 = out_addr_5_reg_943;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        out_r_address1 = out_addr_3_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_address1 = out_addr_1_reg_903;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_d0 = add_ln17_10_reg_1176;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_d0 = add_ln17_8_reg_1156;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_r_d0 = add_ln17_6_reg_1146;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_r_d0 = add_ln17_4_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_r_d0 = add_ln17_2_reg_1126;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_r_d0 = add_ln17_reg_1094;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_d1 = add_ln17_11_reg_1181;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_d1 = add_ln17_9_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_r_d1 = add_ln17_7_reg_1151;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_r_d1 = add_ln17_5_reg_1141;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_r_d1 = add_ln17_3_reg_1131;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_r_d1 = add_ln17_1_reg_1099;
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address1 = sext_ln16_1_fu_725_p1;

assign add_ln15_1_fu_478_p2 = (ii + 5'd2);

assign add_ln15_2_fu_555_p2 = (ii + 5'd3);

assign add_ln15_3_fu_654_p2 = (zext_ln18_reg_878 + zext_ln15_fu_650_p1);

assign add_ln15_4_fu_664_p2 = (zext_ln18_8_reg_928 + zext_ln15_fu_650_p1);

assign add_ln15_5_fu_674_p2 = (zext_ln18_10_reg_953 + zext_ln15_fu_650_p1);

assign add_ln15_6_fu_679_p2 = (zext_ln18_12_reg_978 + zext_ln15_fu_650_p1);

assign add_ln15_fu_401_p2 = (ii + 5'd1);

assign add_ln16_1_fu_370_p2 = (jj + 4'd2);

assign add_ln16_2_fu_710_p2 = (sub_ln16_fu_704_p2 + zext_ln18_2_reg_883);

assign add_ln16_3_fu_720_p2 = (sub_ln16_fu_704_p2 + zext_ln18_4_reg_898);

assign add_ln16_4_fu_730_p2 = (sub_ln16_fu_704_p2 + zext_ln18_6_reg_913);

assign add_ln16_fu_339_p2 = (jj + 4'd1);

assign add_ln18_10_fu_610_p2 = (sub_ln18_3_fu_593_p2 + zext_ln18_5_fu_355_p1);

assign add_ln18_11_fu_621_p2 = (sub_ln18_3_fu_593_p2 + zext_ln18_7_fu_386_p1);

assign add_ln18_1_fu_359_p2 = (sub_ln18_fu_314_p2 + zext_ln18_5_fu_355_p1);

assign add_ln18_2_fu_390_p2 = (sub_ln18_fu_314_p2 + zext_ln18_7_fu_386_p1);

assign add_ln18_3_fu_445_p2 = (sub_ln18_1_fu_439_p2 + zext_ln18_3_fu_324_p1);

assign add_ln18_4_fu_456_p2 = (sub_ln18_1_fu_439_p2 + zext_ln18_5_fu_355_p1);

assign add_ln18_5_fu_467_p2 = (sub_ln18_1_fu_439_p2 + zext_ln18_7_fu_386_p1);

assign add_ln18_6_fu_522_p2 = (sub_ln18_2_fu_516_p2 + zext_ln18_3_fu_324_p1);

assign add_ln18_7_fu_533_p2 = (sub_ln18_2_fu_516_p2 + zext_ln18_5_fu_355_p1);

assign add_ln18_8_fu_544_p2 = (sub_ln18_2_fu_516_p2 + zext_ln18_7_fu_386_p1);

assign add_ln18_9_fu_599_p2 = (sub_ln18_3_fu_593_p2 + zext_ln18_3_fu_324_p1);

assign add_ln18_fu_328_p2 = (sub_ln18_fu_314_p2 + zext_ln18_3_fu_324_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_268_p3 = ((icmp_ln14_reg_1006[0:0] === 1'b1) ? 16'd0 : reg_260);

assign grp_fu_275_p3 = ((icmp_ln14_reg_1006[0:0] === 1'b1) ? 16'd0 : reg_264);

assign icmp_ln10_fu_632_p2 = ((k_0_reg_249 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_644_p2 = ((k_0_reg_249 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_376_p2 = ((add_ln16_1_fu_370_p2 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_345_p2 = ((add_ln16_fu_339_p2 < 4'd12) ? 1'b1 : 1'b0);

assign k_fu_638_p2 = (k_0_reg_249 + 3'd1);

assign select_ln14_10_fu_789_p3 = ((icmp_ln14_reg_1006[0:0] === 1'b1) ? 16'd0 : out_r_q0);

assign select_ln14_11_fu_796_p3 = ((icmp_ln14_reg_1006[0:0] === 1'b1) ? 16'd0 : out_r_q1);

assign select_ln15_1_fu_761_p3 = ((tmp_6_reg_923[0:0] === 1'b1) ? 16'd0 : A_q1);

assign select_ln15_2_fu_775_p3 = ((tmp_9_reg_948[0:0] === 1'b1) ? 16'd0 : A_q0);

assign select_ln15_3_fu_782_p3 = ((tmp_12_reg_973[0:0] === 1'b1) ? 16'd0 : A_q1);

assign select_ln15_fu_747_p3 = ((tmp_3_reg_873[0:0] === 1'b1) ? 16'd0 : A_q0);

assign select_ln16_1_fu_768_p3 = ((icmp_ln16_1_reg_908[0:0] === 1'b1) ? B_q0 : 16'd0);

assign select_ln16_fu_754_p3 = ((icmp_ln16_reg_893[0:0] === 1'b1) ? B_q1 : 16'd0);

assign sext_ln16_1_fu_725_p1 = $signed(add_ln16_3_fu_720_p2);

assign sext_ln16_2_fu_743_p1 = $signed(add_ln16_4_reg_1044);

assign sext_ln16_fu_715_p1 = $signed(add_ln16_2_fu_710_p2);

assign sext_ln18_10_fu_616_p1 = $signed(add_ln18_10_fu_610_p2);

assign sext_ln18_11_fu_627_p1 = $signed(add_ln18_11_fu_621_p2);

assign sext_ln18_1_fu_365_p1 = $signed(add_ln18_1_fu_359_p2);

assign sext_ln18_2_fu_396_p1 = $signed(add_ln18_2_fu_390_p2);

assign sext_ln18_3_fu_451_p1 = $signed(add_ln18_3_fu_445_p2);

assign sext_ln18_4_fu_462_p1 = $signed(add_ln18_4_fu_456_p2);

assign sext_ln18_5_fu_473_p1 = $signed(add_ln18_5_fu_467_p2);

assign sext_ln18_6_fu_528_p1 = $signed(add_ln18_6_fu_522_p2);

assign sext_ln18_7_fu_539_p1 = $signed(add_ln18_7_fu_533_p2);

assign sext_ln18_8_fu_550_p1 = $signed(add_ln18_8_fu_544_p2);

assign sext_ln18_9_fu_605_p1 = $signed(add_ln18_9_fu_599_p2);

assign sext_ln18_fu_334_p1 = $signed(add_ln18_fu_328_p2);

assign sub_ln16_fu_704_p2 = (tmp_11_fu_684_p3 - zext_ln16_fu_700_p1);

assign sub_ln18_1_fu_439_p2 = (tmp_5_fu_431_p3 - zext_ln18_9_fu_427_p1);

assign sub_ln18_2_fu_516_p2 = (tmp_8_fu_508_p3 - zext_ln18_11_fu_504_p1);

assign sub_ln18_3_fu_593_p2 = (tmp_10_fu_585_p3 - zext_ln18_13_fu_581_p1);

assign sub_ln18_fu_314_p2 = (tmp_2_fu_306_p3 - zext_ln18_1_fu_302_p1);

assign tmp_10_fu_585_p3 = {{add_ln15_2_fu_555_p2}, {4'd0}};

assign tmp_11_fu_684_p3 = {{k_0_reg_249}, {4'd0}};

assign tmp_13_fu_692_p3 = {{k_0_reg_249}, {2'd0}};

assign tmp_1_fu_290_p3 = {{ii}, {2'd0}};

assign tmp_2_fu_306_p3 = {{ii}, {4'd0}};

assign tmp_4_fu_415_p3 = {{add_ln15_fu_401_p2}, {2'd0}};

assign tmp_5_fu_431_p3 = {{add_ln15_fu_401_p2}, {4'd0}};

assign tmp_7_fu_492_p3 = {{add_ln15_1_fu_478_p2}, {2'd0}};

assign tmp_8_fu_508_p3 = {{add_ln15_1_fu_478_p2}, {4'd0}};

assign tmp_s_fu_569_p3 = {{add_ln15_2_fu_555_p2}, {2'd0}};

assign zext_ln15_1_fu_659_p1 = add_ln15_3_fu_654_p2;

assign zext_ln15_2_fu_669_p1 = add_ln15_4_fu_664_p2;

assign zext_ln15_3_fu_735_p1 = add_ln15_5_reg_1024;

assign zext_ln15_4_fu_739_p1 = add_ln15_6_reg_1029;

assign zext_ln15_fu_650_p1 = k_0_reg_249;

assign zext_ln16_fu_700_p1 = tmp_13_fu_692_p3;

assign zext_ln18_10_fu_500_p1 = tmp_7_fu_492_p3;

assign zext_ln18_11_fu_504_p1 = tmp_7_fu_492_p3;

assign zext_ln18_12_fu_577_p1 = tmp_s_fu_569_p3;

assign zext_ln18_13_fu_581_p1 = tmp_s_fu_569_p3;

assign zext_ln18_1_fu_302_p1 = tmp_1_fu_290_p3;

assign zext_ln18_2_fu_320_p1 = jj;

assign zext_ln18_3_fu_324_p1 = jj;

assign zext_ln18_4_fu_351_p1 = add_ln16_fu_339_p2;

assign zext_ln18_5_fu_355_p1 = add_ln16_fu_339_p2;

assign zext_ln18_6_fu_382_p1 = add_ln16_1_fu_370_p2;

assign zext_ln18_7_fu_386_p1 = add_ln16_1_fu_370_p2;

assign zext_ln18_8_fu_423_p1 = tmp_4_fu_415_p3;

assign zext_ln18_9_fu_427_p1 = tmp_4_fu_415_p3;

assign zext_ln18_fu_298_p1 = tmp_1_fu_290_p3;

always @ (posedge ap_clk) begin
    zext_ln18_reg_878[1:0] <= 2'b00;
    zext_ln18_reg_878[7] <= 1'b0;
    zext_ln18_2_reg_883[6:4] <= 3'b000;
    zext_ln18_4_reg_898[6:4] <= 3'b000;
    zext_ln18_6_reg_913[6:4] <= 3'b000;
    zext_ln18_8_reg_928[1:0] <= 2'b00;
    zext_ln18_8_reg_928[7] <= 1'b0;
    zext_ln18_10_reg_953[1:0] <= 2'b00;
    zext_ln18_10_reg_953[7] <= 1'b0;
    zext_ln18_12_reg_978[1:0] <= 2'b00;
    zext_ln18_12_reg_978[7] <= 1'b0;
end

endmodule //block_mmul_helper
