// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="block_mmul,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=841,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=564,HLS_SYN_LUT=989,HLS_VERSION=2019_2_1}" *)

module block_mmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        out_r_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
input  [15:0] A_q1;
output  [5:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
output  [5:0] B_address1;
output   B_ce1;
input  [15:0] B_q1;
output  [7:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [15:0] out_r_d0;
input  [15:0] out_r_q0;
output  [7:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [15:0] out_r_d1;
input  [15:0] out_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] jj_fu_84_p2;
reg   [3:0] jj_reg_102;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln30_fu_78_p2;
wire   [4:0] ii_fu_90_p2;
wire    grp_block_mmul_helper_fu_56_ap_start;
wire    grp_block_mmul_helper_fu_56_ap_done;
wire    grp_block_mmul_helper_fu_56_ap_idle;
wire    grp_block_mmul_helper_fu_56_ap_ready;
wire   [5:0] grp_block_mmul_helper_fu_56_A_address0;
wire    grp_block_mmul_helper_fu_56_A_ce0;
wire   [5:0] grp_block_mmul_helper_fu_56_A_address1;
wire    grp_block_mmul_helper_fu_56_A_ce1;
wire   [5:0] grp_block_mmul_helper_fu_56_B_address0;
wire    grp_block_mmul_helper_fu_56_B_ce0;
wire   [5:0] grp_block_mmul_helper_fu_56_B_address1;
wire    grp_block_mmul_helper_fu_56_B_ce1;
wire   [7:0] grp_block_mmul_helper_fu_56_out_r_address0;
wire    grp_block_mmul_helper_fu_56_out_r_ce0;
wire    grp_block_mmul_helper_fu_56_out_r_we0;
wire   [15:0] grp_block_mmul_helper_fu_56_out_r_d0;
wire   [7:0] grp_block_mmul_helper_fu_56_out_r_address1;
wire    grp_block_mmul_helper_fu_56_out_r_ce1;
wire    grp_block_mmul_helper_fu_56_out_r_we1;
wire   [15:0] grp_block_mmul_helper_fu_56_out_r_d1;
reg   [4:0] ii_0_reg_32;
reg   [3:0] jj_0_reg_44;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_70_p3;
reg    grp_block_mmul_helper_fu_56_ap_start_reg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_block_mmul_helper_fu_56_ap_start_reg = 1'b0;
end

block_mmul_helper grp_block_mmul_helper_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_block_mmul_helper_fu_56_ap_start),
    .ap_done(grp_block_mmul_helper_fu_56_ap_done),
    .ap_idle(grp_block_mmul_helper_fu_56_ap_idle),
    .ap_ready(grp_block_mmul_helper_fu_56_ap_ready),
    .A_address0(grp_block_mmul_helper_fu_56_A_address0),
    .A_ce0(grp_block_mmul_helper_fu_56_A_ce0),
    .A_q0(A_q0),
    .A_address1(grp_block_mmul_helper_fu_56_A_address1),
    .A_ce1(grp_block_mmul_helper_fu_56_A_ce1),
    .A_q1(A_q1),
    .B_address0(grp_block_mmul_helper_fu_56_B_address0),
    .B_ce0(grp_block_mmul_helper_fu_56_B_ce0),
    .B_q0(B_q0),
    .B_address1(grp_block_mmul_helper_fu_56_B_address1),
    .B_ce1(grp_block_mmul_helper_fu_56_B_ce1),
    .B_q1(B_q1),
    .out_r_address0(grp_block_mmul_helper_fu_56_out_r_address0),
    .out_r_ce0(grp_block_mmul_helper_fu_56_out_r_ce0),
    .out_r_we0(grp_block_mmul_helper_fu_56_out_r_we0),
    .out_r_d0(grp_block_mmul_helper_fu_56_out_r_d0),
    .out_r_q0(out_r_q0),
    .out_r_address1(grp_block_mmul_helper_fu_56_out_r_address1),
    .out_r_ce1(grp_block_mmul_helper_fu_56_out_r_ce1),
    .out_r_we1(grp_block_mmul_helper_fu_56_out_r_we1),
    .out_r_d1(grp_block_mmul_helper_fu_56_out_r_d1),
    .out_r_q1(out_r_q1),
    .ii(ii_0_reg_32),
    .jj(jj_0_reg_44)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_block_mmul_helper_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln30_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_block_mmul_helper_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_block_mmul_helper_fu_56_ap_ready == 1'b1)) begin
            grp_block_mmul_helper_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ii_0_reg_32 <= ii_fu_90_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_0_reg_32 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_70_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        jj_0_reg_44 <= 4'd0;
    end else if (((grp_block_mmul_helper_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        jj_0_reg_44 <= jj_reg_102;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        jj_reg_102 <= jj_fu_84_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln30_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_block_mmul_helper_fu_56_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_block_mmul_helper_fu_56_A_address0;

assign A_address1 = grp_block_mmul_helper_fu_56_A_address1;

assign A_ce0 = grp_block_mmul_helper_fu_56_A_ce0;

assign A_ce1 = grp_block_mmul_helper_fu_56_A_ce1;

assign B_address0 = grp_block_mmul_helper_fu_56_B_address0;

assign B_address1 = grp_block_mmul_helper_fu_56_B_address1;

assign B_ce0 = grp_block_mmul_helper_fu_56_B_ce0;

assign B_ce1 = grp_block_mmul_helper_fu_56_B_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_block_mmul_helper_fu_56_ap_start = grp_block_mmul_helper_fu_56_ap_start_reg;

assign icmp_ln30_fu_78_p2 = ((jj_0_reg_44 < 4'd12) ? 1'b1 : 1'b0);

assign ii_fu_90_p2 = (ii_0_reg_32 + 5'd4);

assign jj_fu_84_p2 = (jj_0_reg_44 + 4'd3);

assign out_r_address0 = grp_block_mmul_helper_fu_56_out_r_address0;

assign out_r_address1 = grp_block_mmul_helper_fu_56_out_r_address1;

assign out_r_ce0 = grp_block_mmul_helper_fu_56_out_r_ce0;

assign out_r_ce1 = grp_block_mmul_helper_fu_56_out_r_ce1;

assign out_r_d0 = grp_block_mmul_helper_fu_56_out_r_d0;

assign out_r_d1 = grp_block_mmul_helper_fu_56_out_r_d1;

assign out_r_we0 = grp_block_mmul_helper_fu_56_out_r_we0;

assign out_r_we1 = grp_block_mmul_helper_fu_56_out_r_we1;

assign tmp_fu_70_p3 = ii_0_reg_32[32'd4];

endmodule //block_mmul
