-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_mmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of block_mmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "block_mmul,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.852000,HLS_SYN_LAT=1002551,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=884,HLS_SYN_LUT=1431,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal jj_fu_74_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj_reg_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln30_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_fu_80_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_block_mmul_helper_fu_48_ap_start : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_ap_done : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_ap_idle : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_ap_ready : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_A_ce0 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_A_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_A_ce1 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_B_ce0 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_B_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_B_ce1 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_out_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_out_r_ce0 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_out_r_we0 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_block_mmul_helper_fu_48_out_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_block_mmul_helper_fu_48_out_r_ce1 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_out_r_we1 : STD_LOGIC;
    signal grp_block_mmul_helper_fu_48_out_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_0_reg_24 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj_0_reg_36 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln29_fu_62_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_block_mmul_helper_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component block_mmul_helper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ii : IN STD_LOGIC_VECTOR (6 downto 0);
        jj : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    grp_block_mmul_helper_fu_48 : component block_mmul_helper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_block_mmul_helper_fu_48_ap_start,
        ap_done => grp_block_mmul_helper_fu_48_ap_done,
        ap_idle => grp_block_mmul_helper_fu_48_ap_idle,
        ap_ready => grp_block_mmul_helper_fu_48_ap_ready,
        A_address0 => grp_block_mmul_helper_fu_48_A_address0,
        A_ce0 => grp_block_mmul_helper_fu_48_A_ce0,
        A_q0 => A_q0,
        A_address1 => grp_block_mmul_helper_fu_48_A_address1,
        A_ce1 => grp_block_mmul_helper_fu_48_A_ce1,
        A_q1 => A_q1,
        B_address0 => grp_block_mmul_helper_fu_48_B_address0,
        B_ce0 => grp_block_mmul_helper_fu_48_B_ce0,
        B_q0 => B_q0,
        B_address1 => grp_block_mmul_helper_fu_48_B_address1,
        B_ce1 => grp_block_mmul_helper_fu_48_B_ce1,
        B_q1 => B_q1,
        out_r_address0 => grp_block_mmul_helper_fu_48_out_r_address0,
        out_r_ce0 => grp_block_mmul_helper_fu_48_out_r_ce0,
        out_r_we0 => grp_block_mmul_helper_fu_48_out_r_we0,
        out_r_d0 => grp_block_mmul_helper_fu_48_out_r_d0,
        out_r_q0 => out_r_q0,
        out_r_address1 => grp_block_mmul_helper_fu_48_out_r_address1,
        out_r_ce1 => grp_block_mmul_helper_fu_48_out_r_ce1,
        out_r_we1 => grp_block_mmul_helper_fu_48_out_r_we1,
        out_r_d1 => grp_block_mmul_helper_fu_48_out_r_d1,
        out_r_q1 => out_r_q1,
        ii => ii_0_reg_24,
        jj => jj_0_reg_36);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_block_mmul_helper_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_block_mmul_helper_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln30_fu_68_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_block_mmul_helper_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_block_mmul_helper_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_block_mmul_helper_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ii_0_reg_24_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_68_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ii_0_reg_24 <= ii_fu_80_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ii_0_reg_24 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    jj_0_reg_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_62_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                jj_0_reg_36 <= ap_const_lv7_0;
            elsif (((grp_block_mmul_helper_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                jj_0_reg_36 <= jj_reg_92;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_68_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                jj_reg_92 <= jj_fu_74_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln30_fu_68_p2, grp_block_mmul_helper_fu_48_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln29_fu_62_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln29_fu_62_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln30_fu_68_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_block_mmul_helper_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    A_address0 <= grp_block_mmul_helper_fu_48_A_address0;
    A_address1 <= grp_block_mmul_helper_fu_48_A_address1;
    A_ce0 <= grp_block_mmul_helper_fu_48_A_ce0;
    A_ce1 <= grp_block_mmul_helper_fu_48_A_ce1;
    B_address0 <= grp_block_mmul_helper_fu_48_B_address0;
    B_address1 <= grp_block_mmul_helper_fu_48_B_address1;
    B_ce0 <= grp_block_mmul_helper_fu_48_B_ce0;
    B_ce1 <= grp_block_mmul_helper_fu_48_B_ce1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln29_fu_62_p2)
    begin
        if (((icmp_ln29_fu_62_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln29_fu_62_p2)
    begin
        if (((icmp_ln29_fu_62_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_block_mmul_helper_fu_48_ap_start <= grp_block_mmul_helper_fu_48_ap_start_reg;
    icmp_ln29_fu_62_p2 <= "1" when (unsigned(ii_0_reg_24) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln30_fu_68_p2 <= "1" when (unsigned(jj_0_reg_36) < unsigned(ap_const_lv7_64)) else "0";
    ii_fu_80_p2 <= std_logic_vector(unsigned(ii_0_reg_24) + unsigned(ap_const_lv7_4));
    jj_fu_74_p2 <= std_logic_vector(unsigned(jj_0_reg_36) + unsigned(ap_const_lv7_4));
    out_r_address0 <= grp_block_mmul_helper_fu_48_out_r_address0;
    out_r_address1 <= grp_block_mmul_helper_fu_48_out_r_address1;
    out_r_ce0 <= grp_block_mmul_helper_fu_48_out_r_ce0;
    out_r_ce1 <= grp_block_mmul_helper_fu_48_out_r_ce1;
    out_r_d0 <= grp_block_mmul_helper_fu_48_out_r_d0;
    out_r_d1 <= grp_block_mmul_helper_fu_48_out_r_d1;
    out_r_we0 <= grp_block_mmul_helper_fu_48_out_r_we0;
    out_r_we1 <= grp_block_mmul_helper_fu_48_out_r_we1;
end behav;
