-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity block_mmul_helper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ii : IN STD_LOGIC_VECTOR (6 downto 0);
    jj : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of block_mmul_helper is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv14_64 : STD_LOGIC_VECTOR (13 downto 0) := "00000001100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_286 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln14_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln15_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln15_fu_318_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_reg_884 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_fu_324_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_reg_889 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_reg_894 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln16_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_2_fu_351_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_2_reg_904 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_1_reg_909 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln16_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_4_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_4_reg_919 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_2_reg_924 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln16_2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_2_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_6_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_6_reg_934 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_3_reg_939 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln15_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_1_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln15_1_fu_436_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_1_reg_949 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_4_reg_954 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_5_reg_959 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_6_reg_964 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_7_reg_969 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln15_2_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_2_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln15_2_fu_502_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_2_reg_979 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_8_reg_984 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_9_reg_989 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_10_reg_994 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_11_reg_999 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln15_3_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_3_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln15_3_fu_568_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_3_reg_1009 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_12_reg_1014 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_13_reg_1019 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_14_reg_1024 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_addr_15_reg_1029 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_1037 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_5_fu_660_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_5_reg_1060 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_6_fu_665_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_6_reg_1065 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_5_fu_690_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_5_reg_1080 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_6_fu_695_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_6_reg_1085 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln15_fu_716_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_load_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_fu_723_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_1_fu_730_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_1_reg_1134 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_785_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_reg_1142 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_791_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_1_reg_1147 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_1_fu_737_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_1_reg_1152 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_2_fu_744_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln16_2_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_2_fu_751_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_2_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_3_fu_758_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_3_reg_1176 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_797_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_2_reg_1184 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_803_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_3_reg_1189 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_809_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_4_reg_1194 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_5_reg_1199 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_6_reg_1204 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_827_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_7_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_8_reg_1214 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_839_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_9_reg_1219 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_845_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_10_reg_1224 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_11_reg_1229 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_857_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_12_reg_1234 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_13_reg_1239 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_14_fu_765_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_14_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_15_fu_772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln14_15_reg_1249 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_869_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_14_reg_1254 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_874_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_15_reg_1259 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln16_7_fu_779_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal k_0_reg_263 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_274 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln18_1_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_3_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_5_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_7_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_8_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_9_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_10_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_11_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_12_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_13_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_14_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_15_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_16_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_17_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_18_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_19_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_5_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_6_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_7_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_8_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_2_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_3_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal mul_ln15_fu_318_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_fu_328_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_1_fu_355_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_1_fu_366_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_2_fu_382_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_2_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_3_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_fu_420_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln15_1_fu_436_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_4_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_5_fu_453_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_6_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_7_fu_475_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_1_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln15_2_fu_502_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_8_fu_508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_9_fu_519_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_10_fu_530_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_11_fu_541_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_2_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln15_3_fu_568_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln18_12_fu_574_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_13_fu_585_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_14_fu_596_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_15_fu_607_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln15_4_fu_636_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_3_fu_640_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln15_4_fu_650_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_3_fu_670_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln16_4_fu_680_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_301_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln15_1_fu_436_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_2_fu_502_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_3_fu_568_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln15_fu_318_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component block_mmul_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    block_mmul_mac_mubkb_U1 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1110,
        din1 => B_load_reg_1118,
        din2 => grp_fu_294_p3,
        dout => grp_fu_785_p3);

    block_mmul_mac_mubkb_U2 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1110,
        din1 => select_ln16_reg_1126,
        din2 => grp_fu_301_p3,
        dout => grp_fu_791_p3);

    block_mmul_mac_mubkb_U3 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1110,
        din1 => select_ln16_1_reg_1152,
        din2 => grp_fu_294_p3,
        dout => grp_fu_797_p3);

    block_mmul_mac_mubkb_U4 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_reg_1110,
        din1 => select_ln16_2_reg_1160,
        din2 => grp_fu_301_p3,
        dout => grp_fu_803_p3);

    block_mmul_mac_mubkb_U5 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1134,
        din1 => B_load_reg_1118,
        din2 => grp_fu_294_p3,
        dout => grp_fu_809_p3);

    block_mmul_mac_mubkb_U6 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1134,
        din1 => select_ln16_reg_1126,
        din2 => grp_fu_301_p3,
        dout => grp_fu_815_p3);

    block_mmul_mac_mubkb_U7 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1134,
        din1 => select_ln16_1_reg_1152,
        din2 => grp_fu_294_p3,
        dout => grp_fu_821_p3);

    block_mmul_mac_mubkb_U8 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_1_reg_1134,
        din1 => select_ln16_2_reg_1160,
        din2 => grp_fu_301_p3,
        dout => grp_fu_827_p3);

    block_mmul_mac_mubkb_U9 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1168,
        din1 => B_load_reg_1118,
        din2 => grp_fu_294_p3,
        dout => grp_fu_833_p3);

    block_mmul_mac_mubkb_U10 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1168,
        din1 => select_ln16_reg_1126,
        din2 => grp_fu_301_p3,
        dout => grp_fu_839_p3);

    block_mmul_mac_mubkb_U11 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1168,
        din1 => select_ln16_1_reg_1152,
        din2 => grp_fu_294_p3,
        dout => grp_fu_845_p3);

    block_mmul_mac_mubkb_U12 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_2_reg_1168,
        din1 => select_ln16_2_reg_1160,
        din2 => grp_fu_301_p3,
        dout => grp_fu_851_p3);

    block_mmul_mac_mubkb_U13 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1176,
        din1 => B_load_reg_1118,
        din2 => grp_fu_294_p3,
        dout => grp_fu_857_p3);

    block_mmul_mac_mubkb_U14 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1176,
        din1 => select_ln16_reg_1126,
        din2 => grp_fu_301_p3,
        dout => grp_fu_863_p3);

    block_mmul_mac_mubkb_U15 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1176,
        din1 => select_ln16_1_reg_1152,
        din2 => select_ln14_14_reg_1244,
        dout => grp_fu_869_p3);

    block_mmul_mac_mubkb_U16 : component block_mmul_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => select_ln15_3_reg_1176,
        din1 => select_ln16_2_reg_1160,
        din2 => select_ln14_15_reg_1249,
        dout => grp_fu_874_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_0_reg_263 <= k_reg_1037;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_263 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_mul_reg_274 <= add_ln16_7_fu_779_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_274 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                B_load_reg_1118 <= B_q0;
                select_ln15_1_reg_1134 <= select_ln15_1_fu_730_p3;
                select_ln15_reg_1110 <= select_ln15_fu_716_p3;
                select_ln16_reg_1126 <= select_ln16_fu_723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_2_reg_974 = ap_const_lv1_1))) then
                add_ln15_5_reg_1060 <= add_ln15_5_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_3_reg_1004 = ap_const_lv1_1))) then
                add_ln15_6_reg_1065 <= add_ln15_6_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_1_reg_914 = ap_const_lv1_1))) then
                add_ln16_5_reg_1080 <= add_ln16_5_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_2_reg_929 = ap_const_lv1_1))) then
                add_ln16_6_reg_1085 <= add_ln16_6_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln17_10_reg_1224 <= grp_fu_845_p3;
                add_ln17_11_reg_1229 <= grp_fu_851_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln17_12_reg_1234 <= grp_fu_857_p3;
                add_ln17_13_reg_1239 <= grp_fu_863_p3;
                select_ln14_14_reg_1244 <= select_ln14_14_fu_765_p3;
                select_ln14_15_reg_1249 <= select_ln14_15_fu_772_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln17_14_reg_1254 <= grp_fu_869_p3;
                add_ln17_15_reg_1259 <= grp_fu_874_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln17_1_reg_1147 <= grp_fu_791_p3;
                add_ln17_reg_1142 <= grp_fu_785_p3;
                select_ln15_2_reg_1168 <= select_ln15_2_fu_751_p3;
                select_ln15_3_reg_1176 <= select_ln15_3_fu_758_p3;
                select_ln16_1_reg_1152 <= select_ln16_1_fu_737_p3;
                select_ln16_2_reg_1160 <= select_ln16_2_fu_744_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln17_2_reg_1184 <= grp_fu_797_p3;
                add_ln17_3_reg_1189 <= grp_fu_803_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln17_4_reg_1194 <= grp_fu_809_p3;
                add_ln17_5_reg_1199 <= grp_fu_815_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln17_6_reg_1204 <= grp_fu_821_p3;
                add_ln17_7_reg_1209 <= grp_fu_827_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln17_8_reg_1214 <= grp_fu_833_p3;
                add_ln17_9_reg_1219 <= grp_fu_839_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln14_reg_1042 <= icmp_ln14_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln15_1_reg_944 <= icmp_ln15_1_fu_426_p2;
                icmp_ln15_2_reg_974 <= icmp_ln15_2_fu_492_p2;
                icmp_ln15_3_reg_1004 <= icmp_ln15_3_fu_558_p2;
                icmp_ln15_reg_879 <= icmp_ln15_fu_308_p2;
                icmp_ln16_1_reg_914 <= icmp_ln16_1_fu_372_p2;
                icmp_ln16_2_reg_929 <= icmp_ln16_2_fu_399_p2;
                icmp_ln16_reg_899 <= icmp_ln16_fu_345_p2;
                    mul_ln15_1_reg_949(13 downto 2) <= mul_ln15_1_fu_436_p2(13 downto 2);
                    mul_ln15_2_reg_979(13 downto 2) <= mul_ln15_2_fu_502_p2(13 downto 2);
                    mul_ln15_3_reg_1009(13 downto 2) <= mul_ln15_3_fu_568_p2(13 downto 2);
                    mul_ln15_reg_884(13 downto 2) <= mul_ln15_fu_318_p2(13 downto 2);
                out_addr_10_reg_994 <= zext_ln18_14_fu_536_p1(14 - 1 downto 0);
                out_addr_11_reg_999 <= zext_ln18_15_fu_547_p1(14 - 1 downto 0);
                out_addr_12_reg_1014 <= zext_ln18_16_fu_580_p1(14 - 1 downto 0);
                out_addr_13_reg_1019 <= zext_ln18_17_fu_591_p1(14 - 1 downto 0);
                out_addr_14_reg_1024 <= zext_ln18_18_fu_602_p1(14 - 1 downto 0);
                out_addr_15_reg_1029 <= zext_ln18_19_fu_613_p1(14 - 1 downto 0);
                out_addr_1_reg_909 <= zext_ln18_3_fu_361_p1(14 - 1 downto 0);
                out_addr_2_reg_924 <= zext_ln18_5_fu_388_p1(14 - 1 downto 0);
                out_addr_3_reg_939 <= zext_ln18_7_fu_415_p1(14 - 1 downto 0);
                out_addr_4_reg_954 <= zext_ln18_8_fu_448_p1(14 - 1 downto 0);
                out_addr_5_reg_959 <= zext_ln18_9_fu_459_p1(14 - 1 downto 0);
                out_addr_6_reg_964 <= zext_ln18_10_fu_470_p1(14 - 1 downto 0);
                out_addr_7_reg_969 <= zext_ln18_11_fu_481_p1(14 - 1 downto 0);
                out_addr_8_reg_984 <= zext_ln18_12_fu_514_p1(14 - 1 downto 0);
                out_addr_9_reg_989 <= zext_ln18_13_fu_525_p1(14 - 1 downto 0);
                out_addr_reg_894 <= zext_ln18_1_fu_334_p1(14 - 1 downto 0);
                    zext_ln18_2_reg_904(6 downto 0) <= zext_ln18_2_fu_351_p1(6 downto 0);
                    zext_ln18_4_reg_919(6 downto 0) <= zext_ln18_4_fu_378_p1(6 downto 0);
                    zext_ln18_6_reg_934(6 downto 0) <= zext_ln18_6_fu_405_p1(6 downto 0);
                    zext_ln18_reg_889(6 downto 0) <= zext_ln18_fu_324_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_1037 <= k_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln14_reg_1042 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_286 <= out_r_q0;
                reg_290 <= out_r_q1;
            end if;
        end if;
    end process;
    mul_ln15_reg_884(1 downto 0) <= "00";
    zext_ln18_reg_889(13 downto 7) <= "0000000";
    zext_ln18_2_reg_904(13 downto 7) <= "0000000";
    zext_ln18_4_reg_919(13 downto 7) <= "0000000";
    zext_ln18_6_reg_934(13 downto 7) <= "0000000";
    mul_ln15_1_reg_949(1 downto 0) <= "00";
    mul_ln15_2_reg_979(1 downto 0) <= "00";
    mul_ln15_3_reg_1009(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_618_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_618_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln15_5_fu_645_p1, zext_ln15_7_fu_700_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln15_7_fu_700_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= zext_ln15_5_fu_645_p1(14 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln15_6_fu_655_p1, zext_ln15_8_fu_704_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= zext_ln15_8_fu_704_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address1 <= zext_ln15_6_fu_655_p1(14 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln16_fu_675_p1, zext_ln16_2_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address0 <= zext_ln16_2_fu_708_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= zext_ln16_fu_675_p1(14 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln16_1_fu_685_p1, zext_ln16_3_fu_712_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address1 <= zext_ln16_3_fu_712_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address1 <= zext_ln16_1_fu_685_p1(14 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_1_fu_486_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv7_2));
    add_ln15_2_fu_552_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv7_3));
    add_ln15_3_fu_640_p2 <= std_logic_vector(unsigned(mul_ln15_reg_884) + unsigned(zext_ln15_4_fu_636_p1));
    add_ln15_4_fu_650_p2 <= std_logic_vector(unsigned(mul_ln15_1_reg_949) + unsigned(zext_ln15_4_fu_636_p1));
    add_ln15_5_fu_660_p2 <= std_logic_vector(unsigned(mul_ln15_2_reg_979) + unsigned(zext_ln15_4_fu_636_p1));
    add_ln15_6_fu_665_p2 <= std_logic_vector(unsigned(mul_ln15_3_reg_1009) + unsigned(zext_ln15_4_fu_636_p1));
    add_ln15_fu_420_p2 <= std_logic_vector(unsigned(ii) + unsigned(ap_const_lv7_1));
    add_ln16_1_fu_366_p2 <= std_logic_vector(unsigned(jj) + unsigned(ap_const_lv7_2));
    add_ln16_2_fu_393_p2 <= std_logic_vector(unsigned(jj) + unsigned(ap_const_lv7_3));
    add_ln16_3_fu_670_p2 <= std_logic_vector(unsigned(phi_mul_reg_274) + unsigned(zext_ln18_reg_889));
    add_ln16_4_fu_680_p2 <= std_logic_vector(unsigned(phi_mul_reg_274) + unsigned(zext_ln18_2_reg_904));
    add_ln16_5_fu_690_p2 <= std_logic_vector(unsigned(phi_mul_reg_274) + unsigned(zext_ln18_4_reg_919));
    add_ln16_6_fu_695_p2 <= std_logic_vector(unsigned(phi_mul_reg_274) + unsigned(zext_ln18_6_reg_934));
    add_ln16_7_fu_779_p2 <= std_logic_vector(unsigned(phi_mul_reg_274) + unsigned(ap_const_lv14_64));
    add_ln16_fu_339_p2 <= std_logic_vector(unsigned(jj) + unsigned(ap_const_lv7_1));
    add_ln18_10_fu_530_p2 <= std_logic_vector(unsigned(mul_ln15_2_fu_502_p2) + unsigned(zext_ln18_4_fu_378_p1));
    add_ln18_11_fu_541_p2 <= std_logic_vector(unsigned(mul_ln15_2_fu_502_p2) + unsigned(zext_ln18_6_fu_405_p1));
    add_ln18_12_fu_574_p2 <= std_logic_vector(unsigned(mul_ln15_3_fu_568_p2) + unsigned(zext_ln18_fu_324_p1));
    add_ln18_13_fu_585_p2 <= std_logic_vector(unsigned(mul_ln15_3_fu_568_p2) + unsigned(zext_ln18_2_fu_351_p1));
    add_ln18_14_fu_596_p2 <= std_logic_vector(unsigned(mul_ln15_3_fu_568_p2) + unsigned(zext_ln18_4_fu_378_p1));
    add_ln18_15_fu_607_p2 <= std_logic_vector(unsigned(mul_ln15_3_fu_568_p2) + unsigned(zext_ln18_6_fu_405_p1));
    add_ln18_1_fu_355_p2 <= std_logic_vector(unsigned(mul_ln15_fu_318_p2) + unsigned(zext_ln18_2_fu_351_p1));
    add_ln18_2_fu_382_p2 <= std_logic_vector(unsigned(mul_ln15_fu_318_p2) + unsigned(zext_ln18_4_fu_378_p1));
    add_ln18_3_fu_409_p2 <= std_logic_vector(unsigned(mul_ln15_fu_318_p2) + unsigned(zext_ln18_6_fu_405_p1));
    add_ln18_4_fu_442_p2 <= std_logic_vector(unsigned(mul_ln15_1_fu_436_p2) + unsigned(zext_ln18_fu_324_p1));
    add_ln18_5_fu_453_p2 <= std_logic_vector(unsigned(mul_ln15_1_fu_436_p2) + unsigned(zext_ln18_2_fu_351_p1));
    add_ln18_6_fu_464_p2 <= std_logic_vector(unsigned(mul_ln15_1_fu_436_p2) + unsigned(zext_ln18_4_fu_378_p1));
    add_ln18_7_fu_475_p2 <= std_logic_vector(unsigned(mul_ln15_1_fu_436_p2) + unsigned(zext_ln18_6_fu_405_p1));
    add_ln18_8_fu_508_p2 <= std_logic_vector(unsigned(mul_ln15_2_fu_502_p2) + unsigned(zext_ln18_fu_324_p1));
    add_ln18_9_fu_519_p2 <= std_logic_vector(unsigned(mul_ln15_2_fu_502_p2) + unsigned(zext_ln18_2_fu_351_p1));
    add_ln18_fu_328_p2 <= std_logic_vector(unsigned(mul_ln15_fu_318_p2) + unsigned(zext_ln18_fu_324_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_294_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1042(0) = '1') else 
        reg_286;
    grp_fu_301_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1042(0) = '1') else 
        reg_290;
    icmp_ln10_fu_618_p2 <= "1" when (k_0_reg_263 = ap_const_lv7_64) else "0";
    icmp_ln14_fu_630_p2 <= "1" when (k_0_reg_263 = ap_const_lv7_0) else "0";
    icmp_ln15_1_fu_426_p2 <= "1" when (unsigned(add_ln15_fu_420_p2) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln15_2_fu_492_p2 <= "1" when (unsigned(add_ln15_1_fu_486_p2) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln15_3_fu_558_p2 <= "1" when (unsigned(add_ln15_2_fu_552_p2) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln15_fu_308_p2 <= "1" when (unsigned(ii) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln16_1_fu_372_p2 <= "1" when (unsigned(add_ln16_1_fu_366_p2) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln16_2_fu_399_p2 <= "1" when (unsigned(add_ln16_2_fu_393_p2) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln16_fu_345_p2 <= "1" when (unsigned(add_ln16_fu_339_p2) < unsigned(ap_const_lv7_64)) else "0";
    k_fu_624_p2 <= std_logic_vector(unsigned(k_0_reg_263) + unsigned(ap_const_lv7_1));
    mul_ln15_1_fu_436_p0 <= mul_ln15_1_fu_436_p00(7 - 1 downto 0);
    mul_ln15_1_fu_436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_fu_420_p2),14));
    mul_ln15_1_fu_436_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_1_fu_436_p0) * unsigned(ap_const_lv14_64), 14));
    mul_ln15_2_fu_502_p0 <= mul_ln15_2_fu_502_p00(7 - 1 downto 0);
    mul_ln15_2_fu_502_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_1_fu_486_p2),14));
    mul_ln15_2_fu_502_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_2_fu_502_p0) * unsigned(ap_const_lv14_64), 14));
    mul_ln15_3_fu_568_p0 <= mul_ln15_3_fu_568_p00(7 - 1 downto 0);
    mul_ln15_3_fu_568_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_2_fu_552_p2),14));
    mul_ln15_3_fu_568_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_3_fu_568_p0) * unsigned(ap_const_lv14_64), 14));
    mul_ln15_fu_318_p0 <= mul_ln15_fu_318_p00(7 - 1 downto 0);
    mul_ln15_fu_318_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii),14));
    mul_ln15_fu_318_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_fu_318_p0) * unsigned(ap_const_lv14_64), 14));

    out_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, out_addr_reg_894, out_addr_2_reg_924, out_addr_4_reg_954, out_addr_6_reg_964, out_addr_8_reg_984, out_addr_10_reg_994, out_addr_12_reg_1014, out_addr_14_reg_1024, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_r_address0 <= out_addr_14_reg_1024;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_address0 <= out_addr_12_reg_1014;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_address0 <= out_addr_10_reg_994;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_r_address0 <= out_addr_8_reg_984;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_r_address0 <= out_addr_6_reg_964;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_address0 <= out_addr_4_reg_954;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            out_r_address0 <= out_addr_2_reg_924;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_address0 <= out_addr_reg_894;
        else 
            out_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, out_addr_1_reg_909, out_addr_3_reg_939, out_addr_5_reg_959, out_addr_7_reg_969, out_addr_9_reg_989, out_addr_11_reg_999, out_addr_13_reg_1019, out_addr_15_reg_1029, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            out_r_address1 <= out_addr_15_reg_1029;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_r_address1 <= out_addr_13_reg_1019;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_address1 <= out_addr_11_reg_999;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            out_r_address1 <= out_addr_9_reg_989;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_r_address1 <= out_addr_7_reg_969;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            out_r_address1 <= out_addr_5_reg_959;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            out_r_address1 <= out_addr_3_reg_939;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_r_address1 <= out_addr_1_reg_909;
        else 
            out_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_d0_assign_proc : process(add_ln17_reg_1142, add_ln17_2_reg_1184, add_ln17_4_reg_1194, add_ln17_6_reg_1204, add_ln17_8_reg_1214, add_ln17_10_reg_1224, add_ln17_12_reg_1234, ap_CS_fsm_state10, add_ln17_14_reg_1254, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_d0 <= add_ln17_14_reg_1254;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_r_d0 <= add_ln17_12_reg_1234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_d0 <= add_ln17_10_reg_1224;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_d0 <= add_ln17_8_reg_1214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d0 <= add_ln17_6_reg_1204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d0 <= add_ln17_4_reg_1194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_d0 <= add_ln17_2_reg_1184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_r_d0 <= add_ln17_reg_1142;
        else 
            out_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_d1_assign_proc : process(add_ln17_1_reg_1147, add_ln17_3_reg_1189, add_ln17_5_reg_1199, add_ln17_7_reg_1209, add_ln17_9_reg_1219, add_ln17_11_reg_1229, ap_CS_fsm_state10, add_ln17_13_reg_1239, ap_CS_fsm_state11, add_ln17_15_reg_1259, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_d1 <= add_ln17_15_reg_1259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_r_d1 <= add_ln17_13_reg_1239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_d1 <= add_ln17_11_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_d1 <= add_ln17_9_reg_1219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_d1 <= add_ln17_7_reg_1209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_d1 <= add_ln17_5_reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_r_d1 <= add_ln17_3_reg_1189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_r_d1 <= add_ln17_1_reg_1147;
        else 
            out_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_14_fu_765_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1042(0) = '1') else 
        out_r_q0;
    select_ln14_15_fu_772_p3 <= 
        ap_const_lv16_0 when (icmp_ln14_reg_1042(0) = '1') else 
        out_r_q1;
    select_ln15_1_fu_730_p3 <= 
        A_q1 when (icmp_ln15_1_reg_944(0) = '1') else 
        ap_const_lv16_0;
    select_ln15_2_fu_751_p3 <= 
        A_q0 when (icmp_ln15_2_reg_974(0) = '1') else 
        ap_const_lv16_0;
    select_ln15_3_fu_758_p3 <= 
        A_q1 when (icmp_ln15_3_reg_1004(0) = '1') else 
        ap_const_lv16_0;
    select_ln15_fu_716_p3 <= 
        A_q0 when (icmp_ln15_reg_879(0) = '1') else 
        ap_const_lv16_0;
    select_ln16_1_fu_737_p3 <= 
        B_q0 when (icmp_ln16_1_reg_914(0) = '1') else 
        ap_const_lv16_0;
    select_ln16_2_fu_744_p3 <= 
        B_q1 when (icmp_ln16_2_reg_929(0) = '1') else 
        ap_const_lv16_0;
    select_ln16_fu_723_p3 <= 
        B_q1 when (icmp_ln16_reg_899(0) = '1') else 
        ap_const_lv16_0;
    zext_ln15_4_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_263),14));
    zext_ln15_5_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_3_fu_640_p2),64));
    zext_ln15_6_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_4_fu_650_p2),64));
    zext_ln15_7_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_5_reg_1060),64));
    zext_ln15_8_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_6_reg_1065),64));
    zext_ln16_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_4_fu_680_p2),64));
    zext_ln16_2_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_5_reg_1080),64));
    zext_ln16_3_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_6_reg_1085),64));
    zext_ln16_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_3_fu_670_p2),64));
    zext_ln18_10_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_6_fu_464_p2),64));
    zext_ln18_11_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_7_fu_475_p2),64));
    zext_ln18_12_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_8_fu_508_p2),64));
    zext_ln18_13_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_9_fu_519_p2),64));
    zext_ln18_14_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_10_fu_530_p2),64));
    zext_ln18_15_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_11_fu_541_p2),64));
    zext_ln18_16_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_12_fu_574_p2),64));
    zext_ln18_17_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_13_fu_585_p2),64));
    zext_ln18_18_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_14_fu_596_p2),64));
    zext_ln18_19_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_15_fu_607_p2),64));
    zext_ln18_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_328_p2),64));
    zext_ln18_2_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_fu_339_p2),14));
    zext_ln18_3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_1_fu_355_p2),64));
    zext_ln18_4_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_1_fu_366_p2),14));
    zext_ln18_5_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_2_fu_382_p2),64));
    zext_ln18_6_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_2_fu_393_p2),14));
    zext_ln18_7_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_3_fu_409_p2),64));
    zext_ln18_8_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_4_fu_442_p2),64));
    zext_ln18_9_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_5_fu_453_p2),64));
    zext_ln18_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj),14));
end behav;
