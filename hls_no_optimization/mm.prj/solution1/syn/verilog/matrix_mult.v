// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=35364,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=3,HLS_SYN_FF=339,HLS_SYN_LUT=749,HLS_VERSION=2019_2_1}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [8:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [8:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_264_p2;
reg   [4:0] i_reg_674;
wire    ap_CS_fsm_state2;
wire   [8:0] shl_ln_fu_270_p3;
reg   [8:0] shl_ln_reg_679;
wire   [0:0] icmp_ln16_fu_258_p2;
wire   [6:0] shl_ln18_1_fu_278_p3;
reg   [6:0] shl_ln18_1_reg_684;
wire   [9:0] add_ln18_2_fu_294_p2;
reg   [9:0] add_ln18_2_reg_689;
wire   [4:0] j_fu_310_p2;
reg   [4:0] j_reg_697;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln17_fu_304_p2;
wire   [9:0] add_ln18_3_fu_339_p2;
reg   [9:0] add_ln18_3_reg_707;
wire   [4:0] i_1_fu_354_p2;
reg   [4:0] i_1_reg_715;
wire    ap_CS_fsm_state5;
wire   [8:0] shl_ln1_fu_360_p3;
reg   [8:0] shl_ln1_reg_720;
wire   [0:0] icmp_ln22_fu_348_p2;
wire   [6:0] shl_ln24_1_fu_368_p3;
reg   [6:0] shl_ln24_1_reg_725;
wire   [9:0] add_ln24_2_fu_384_p2;
reg   [9:0] add_ln24_2_reg_730;
wire   [4:0] j_1_fu_400_p2;
reg   [4:0] j_1_reg_738;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_394_p2;
wire   [9:0] add_ln24_3_fu_429_p2;
reg   [9:0] add_ln24_3_reg_748;
wire   [4:0] m_fu_444_p2;
reg   [4:0] m_reg_756;
wire    ap_CS_fsm_state8;
wire   [9:0] add_ln33_fu_474_p2;
reg   [9:0] add_ln33_reg_761;
wire   [0:0] icmp_ln29_fu_438_p2;
wire   [4:0] o_fu_486_p2;
reg   [4:0] o_reg_770;
wire    ap_CS_fsm_state9;
wire   [9:0] zext_ln35_fu_492_p1;
reg   [9:0] zext_ln35_reg_775;
wire   [0:0] icmp_ln30_fu_480_p2;
reg   [8:0] c_buff_addr_1_reg_780;
wire   [4:0] n_fu_512_p2;
reg   [4:0] n_reg_788;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln32_fu_506_p2;
wire   [31:0] a_buff_q0;
reg  signed [31:0] a_buff_load_reg_803;
wire    ap_CS_fsm_state11;
wire   [31:0] b_buff_q0;
reg  signed [31:0] b_buff_load_reg_808;
wire   [31:0] mul_ln33_fu_572_p2;
reg   [31:0] mul_ln33_reg_813;
wire    ap_CS_fsm_state12;
wire   [31:0] accum_fu_576_p2;
wire    ap_CS_fsm_state13;
wire   [4:0] i_2_fu_587_p2;
reg   [4:0] i_2_reg_826;
wire    ap_CS_fsm_state14;
wire   [8:0] tmp_6_fu_593_p3;
reg   [8:0] tmp_6_reg_831;
wire   [0:0] icmp_ln40_fu_581_p2;
wire   [6:0] tmp_7_fu_605_p3;
reg   [6:0] tmp_7_reg_836;
wire   [9:0] add_ln42_2_fu_617_p2;
reg   [9:0] add_ln42_2_reg_841;
wire   [4:0] j_2_fu_633_p2;
reg   [4:0] j_2_reg_849;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln41_fu_627_p2;
wire   [8:0] add_ln42_fu_662_p2;
reg   [8:0] add_ln42_reg_859;
reg   [8:0] a_buff_address0;
reg    a_buff_ce0;
reg    a_buff_we0;
reg   [8:0] b_buff_address0;
reg    b_buff_ce0;
reg    b_buff_we0;
reg   [8:0] c_buff_address0;
reg    c_buff_ce0;
reg    c_buff_we0;
wire   [31:0] c_buff_q0;
reg   [4:0] i_0_reg_146;
reg   [4:0] j_0_reg_157;
wire    ap_CS_fsm_state4;
reg   [4:0] i1_0_reg_168;
reg   [4:0] j2_0_reg_179;
wire    ap_CS_fsm_state7;
reg   [4:0] m_0_reg_190;
reg   [4:0] o_0_reg_201;
reg   [31:0] accum_0_reg_212;
reg   [4:0] n_0_reg_225;
reg   [4:0] i3_0_reg_236;
reg   [4:0] j4_0_reg_247;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln18_1_fu_330_p1;
wire   [63:0] zext_ln18_5_fu_344_p1;
wire   [63:0] zext_ln24_1_fu_420_p1;
wire   [63:0] zext_ln24_5_fu_434_p1;
wire   [63:0] zext_ln35_1_fu_501_p1;
wire   [63:0] zext_ln33_3_fu_527_p1;
wire   [63:0] zext_ln33_6_fu_567_p1;
wire   [63:0] zext_ln42_5_fu_648_p1;
wire   [63:0] zext_ln42_2_fu_667_p1;
wire   [9:0] zext_ln18_2_fu_290_p1;
wire   [9:0] zext_ln18_fu_286_p1;
wire   [6:0] zext_ln17_fu_300_p1;
wire   [6:0] add_ln18_1_fu_316_p2;
wire   [8:0] zext_ln18_3_fu_321_p1;
wire   [8:0] add_ln18_fu_325_p2;
wire   [9:0] zext_ln18_4_fu_335_p1;
wire   [9:0] zext_ln24_2_fu_380_p1;
wire   [9:0] zext_ln24_fu_376_p1;
wire   [6:0] zext_ln23_fu_390_p1;
wire   [6:0] add_ln24_1_fu_406_p2;
wire   [8:0] zext_ln24_3_fu_411_p1;
wire   [8:0] add_ln24_fu_415_p2;
wire   [9:0] zext_ln24_4_fu_425_p1;
wire   [8:0] tmp_4_fu_450_p3;
wire   [6:0] tmp_5_fu_462_p3;
wire   [9:0] zext_ln33_1_fu_470_p1;
wire   [9:0] zext_ln33_fu_458_p1;
wire   [9:0] add_ln35_fu_496_p2;
wire   [9:0] zext_ln33_2_fu_518_p1;
wire   [9:0] add_ln33_1_fu_522_p2;
wire   [8:0] tmp_8_fu_532_p3;
wire   [6:0] tmp_9_fu_544_p3;
wire   [9:0] zext_ln33_5_fu_552_p1;
wire   [9:0] zext_ln33_4_fu_540_p1;
wire   [9:0] add_ln33_2_fu_556_p2;
wire   [9:0] add_ln33_3_fu_562_p2;
wire   [9:0] zext_ln42_1_fu_613_p1;
wire   [9:0] zext_ln42_fu_601_p1;
wire   [9:0] zext_ln42_4_fu_639_p1;
wire   [9:0] add_ln42_3_fu_643_p2;
wire   [6:0] zext_ln41_fu_623_p1;
wire   [6:0] add_ln42_1_fu_653_p2;
wire   [8:0] zext_ln42_3_fu_658_p1;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

matrix_mult_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
a_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_buff_address0),
    .ce0(a_buff_ce0),
    .we0(a_buff_we0),
    .d0(a_q0),
    .q0(a_buff_q0)
);

matrix_mult_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
b_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_buff_address0),
    .ce0(b_buff_ce0),
    .we0(b_buff_we0),
    .d0(b_q0),
    .q0(b_buff_q0)
);

matrix_mult_a_buff #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
c_buff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_buff_address0),
    .ce0(c_buff_ce0),
    .we0(c_buff_we0),
    .d0(accum_0_reg_212),
    .q0(c_buff_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        accum_0_reg_212 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        accum_0_reg_212 <= accum_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_168 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_394_p2 == 1'd1))) begin
        i1_0_reg_168 <= i_1_reg_715;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln29_fu_438_p2 == 1'd1))) begin
        i3_0_reg_236 <= 5'd0;
    end else if (((icmp_ln41_fu_627_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        i3_0_reg_236 <= i_2_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_146 <= i_reg_674;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_146 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_0_reg_179 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j2_0_reg_179 <= j_1_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_581_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        j4_0_reg_247 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        j4_0_reg_247 <= j_2_reg_849;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_157 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_157 <= j_reg_697;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_0_reg_190 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln30_fu_480_p2 == 1'd1))) begin
        m_0_reg_190 <= m_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        n_0_reg_225 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        n_0_reg_225 <= n_reg_788;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        o_0_reg_201 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln32_fu_506_p2 == 1'd1))) begin
        o_0_reg_201 <= o_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        a_buff_load_reg_803 <= a_buff_q0;
        b_buff_load_reg_808 <= b_buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln18_2_reg_689[9 : 2] <= add_ln18_2_fu_294_p2[9 : 2];
        shl_ln18_1_reg_684[6 : 2] <= shl_ln18_1_fu_278_p3[6 : 2];
        shl_ln_reg_679[8 : 4] <= shl_ln_fu_270_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln18_3_reg_707 <= add_ln18_3_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln24_2_reg_730[9 : 2] <= add_ln24_2_fu_384_p2[9 : 2];
        shl_ln1_reg_720[8 : 4] <= shl_ln1_fu_360_p3[8 : 4];
        shl_ln24_1_reg_725[6 : 2] <= shl_ln24_1_fu_368_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln24_3_reg_748 <= add_ln24_3_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln33_reg_761[9 : 2] <= add_ln33_fu_474_p2[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_581_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        add_ln42_2_reg_841[9 : 2] <= add_ln42_2_fu_617_p2[9 : 2];
        tmp_6_reg_831[8 : 4] <= tmp_6_fu_593_p3[8 : 4];
        tmp_7_reg_836[6 : 2] <= tmp_7_fu_605_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_627_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        add_ln42_reg_859 <= add_ln42_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        c_buff_addr_1_reg_780 <= zext_ln35_1_fu_501_p1;
        zext_ln35_reg_775[4 : 0] <= zext_ln35_fu_492_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_715 <= i_1_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_2_reg_826 <= i_2_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_674 <= i_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_738 <= j_1_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_2_reg_849 <= j_2_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_697 <= j_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_reg_756 <= m_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln33_reg_813 <= mul_ln33_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_reg_788 <= n_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        o_reg_770 <= o_fu_486_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_buff_address0 = zext_ln33_3_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_buff_address0 = zext_ln18_5_fu_344_p1;
    end else begin
        a_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        a_buff_ce0 = 1'b1;
    end else begin
        a_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_buff_we0 = 1'b1;
    end else begin
        a_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln40_fu_581_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln40_fu_581_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_buff_address0 = zext_ln33_6_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_buff_address0 = zext_ln24_5_fu_434_p1;
    end else begin
        b_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10))) begin
        b_buff_ce0 = 1'b1;
    end else begin
        b_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_buff_we0 = 1'b1;
    end else begin
        b_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        c_buff_address0 = zext_ln42_5_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        c_buff_address0 = c_buff_addr_1_reg_780;
    end else begin
        c_buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        c_buff_ce0 = 1'b1;
    end else begin
        c_buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln32_fu_506_p2 == 1'd1))) begin
        c_buff_we0 = 1'b1;
    end else begin
        c_buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_394_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln29_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln30_fu_480_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln32_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln40_fu_581_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln41_fu_627_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln18_1_fu_330_p1;

assign accum_fu_576_p2 = (accum_0_reg_212 + mul_ln33_reg_813);

assign add_ln18_1_fu_316_p2 = (zext_ln17_fu_300_p1 + shl_ln18_1_reg_684);

assign add_ln18_2_fu_294_p2 = (zext_ln18_2_fu_290_p1 + zext_ln18_fu_286_p1);

assign add_ln18_3_fu_339_p2 = (add_ln18_2_reg_689 + zext_ln18_4_fu_335_p1);

assign add_ln18_fu_325_p2 = (shl_ln_reg_679 + zext_ln18_3_fu_321_p1);

assign add_ln24_1_fu_406_p2 = (zext_ln23_fu_390_p1 + shl_ln24_1_reg_725);

assign add_ln24_2_fu_384_p2 = (zext_ln24_2_fu_380_p1 + zext_ln24_fu_376_p1);

assign add_ln24_3_fu_429_p2 = (add_ln24_2_reg_730 + zext_ln24_4_fu_425_p1);

assign add_ln24_fu_415_p2 = (shl_ln1_reg_720 + zext_ln24_3_fu_411_p1);

assign add_ln33_1_fu_522_p2 = (add_ln33_reg_761 + zext_ln33_2_fu_518_p1);

assign add_ln33_2_fu_556_p2 = (zext_ln33_5_fu_552_p1 + zext_ln33_4_fu_540_p1);

assign add_ln33_3_fu_562_p2 = (add_ln33_2_fu_556_p2 + zext_ln35_reg_775);

assign add_ln33_fu_474_p2 = (zext_ln33_1_fu_470_p1 + zext_ln33_fu_458_p1);

assign add_ln35_fu_496_p2 = (add_ln33_reg_761 + zext_ln35_fu_492_p1);

assign add_ln42_1_fu_653_p2 = (zext_ln41_fu_623_p1 + tmp_7_reg_836);

assign add_ln42_2_fu_617_p2 = (zext_ln42_1_fu_613_p1 + zext_ln42_fu_601_p1);

assign add_ln42_3_fu_643_p2 = (add_ln42_2_reg_841 + zext_ln42_4_fu_639_p1);

assign add_ln42_fu_662_p2 = (tmp_6_reg_831 + zext_ln42_3_fu_658_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_address0 = zext_ln24_1_fu_420_p1;

assign c_address0 = zext_ln42_2_fu_667_p1;

assign c_d0 = c_buff_q0;

assign i_1_fu_354_p2 = (i1_0_reg_168 + 5'd1);

assign i_2_fu_587_p2 = (i3_0_reg_236 + 5'd1);

assign i_fu_264_p2 = (i_0_reg_146 + 5'd1);

assign icmp_ln16_fu_258_p2 = ((i_0_reg_146 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_304_p2 = ((j_0_reg_157 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_348_p2 = ((i1_0_reg_168 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_394_p2 = ((j2_0_reg_179 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_438_p2 = ((m_0_reg_190 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_480_p2 = ((o_0_reg_201 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_506_p2 = ((n_0_reg_225 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_581_p2 = ((i3_0_reg_236 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_627_p2 = ((j4_0_reg_247 == 5'd20) ? 1'b1 : 1'b0);

assign j_1_fu_400_p2 = (j2_0_reg_179 + 5'd1);

assign j_2_fu_633_p2 = (j4_0_reg_247 + 5'd1);

assign j_fu_310_p2 = (j_0_reg_157 + 5'd1);

assign m_fu_444_p2 = (m_0_reg_190 + 5'd1);

assign mul_ln33_fu_572_p2 = ($signed(b_buff_load_reg_808) * $signed(a_buff_load_reg_803));

assign n_fu_512_p2 = (n_0_reg_225 + 5'd1);

assign o_fu_486_p2 = (o_0_reg_201 + 5'd1);

assign shl_ln18_1_fu_278_p3 = {{i_0_reg_146}, {2'd0}};

assign shl_ln1_fu_360_p3 = {{i1_0_reg_168}, {4'd0}};

assign shl_ln24_1_fu_368_p3 = {{i1_0_reg_168}, {2'd0}};

assign shl_ln_fu_270_p3 = {{i_0_reg_146}, {4'd0}};

assign tmp_4_fu_450_p3 = {{m_0_reg_190}, {4'd0}};

assign tmp_5_fu_462_p3 = {{m_0_reg_190}, {2'd0}};

assign tmp_6_fu_593_p3 = {{i3_0_reg_236}, {4'd0}};

assign tmp_7_fu_605_p3 = {{i3_0_reg_236}, {2'd0}};

assign tmp_8_fu_532_p3 = {{n_0_reg_225}, {4'd0}};

assign tmp_9_fu_544_p3 = {{n_0_reg_225}, {2'd0}};

assign zext_ln17_fu_300_p1 = j_0_reg_157;

assign zext_ln18_1_fu_330_p1 = add_ln18_fu_325_p2;

assign zext_ln18_2_fu_290_p1 = shl_ln18_1_fu_278_p3;

assign zext_ln18_3_fu_321_p1 = add_ln18_1_fu_316_p2;

assign zext_ln18_4_fu_335_p1 = j_0_reg_157;

assign zext_ln18_5_fu_344_p1 = add_ln18_3_reg_707;

assign zext_ln18_fu_286_p1 = shl_ln_fu_270_p3;

assign zext_ln23_fu_390_p1 = j2_0_reg_179;

assign zext_ln24_1_fu_420_p1 = add_ln24_fu_415_p2;

assign zext_ln24_2_fu_380_p1 = shl_ln24_1_fu_368_p3;

assign zext_ln24_3_fu_411_p1 = add_ln24_1_fu_406_p2;

assign zext_ln24_4_fu_425_p1 = j2_0_reg_179;

assign zext_ln24_5_fu_434_p1 = add_ln24_3_reg_748;

assign zext_ln24_fu_376_p1 = shl_ln1_fu_360_p3;

assign zext_ln33_1_fu_470_p1 = tmp_5_fu_462_p3;

assign zext_ln33_2_fu_518_p1 = n_0_reg_225;

assign zext_ln33_3_fu_527_p1 = add_ln33_1_fu_522_p2;

assign zext_ln33_4_fu_540_p1 = tmp_8_fu_532_p3;

assign zext_ln33_5_fu_552_p1 = tmp_9_fu_544_p3;

assign zext_ln33_6_fu_567_p1 = add_ln33_3_fu_562_p2;

assign zext_ln33_fu_458_p1 = tmp_4_fu_450_p3;

assign zext_ln35_1_fu_501_p1 = add_ln35_fu_496_p2;

assign zext_ln35_fu_492_p1 = o_0_reg_201;

assign zext_ln41_fu_623_p1 = j4_0_reg_247;

assign zext_ln42_1_fu_613_p1 = tmp_7_fu_605_p3;

assign zext_ln42_2_fu_667_p1 = add_ln42_reg_859;

assign zext_ln42_3_fu_658_p1 = add_ln42_1_fu_653_p2;

assign zext_ln42_4_fu_639_p1 = j4_0_reg_247;

assign zext_ln42_5_fu_648_p1 = add_ln42_3_fu_643_p2;

assign zext_ln42_fu_601_p1 = tmp_6_fu_593_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_679[3:0] <= 4'b0000;
    shl_ln18_1_reg_684[1:0] <= 2'b00;
    add_ln18_2_reg_689[1:0] <= 2'b00;
    shl_ln1_reg_720[3:0] <= 4'b0000;
    shl_ln24_1_reg_725[1:0] <= 2'b00;
    add_ln24_2_reg_730[1:0] <= 2'b00;
    add_ln33_reg_761[1:0] <= 2'b00;
    zext_ln35_reg_775[9:5] <= 5'b00000;
    tmp_6_reg_831[3:0] <= 4'b0000;
    tmp_7_reg_836[1:0] <= 2'b00;
    add_ln42_2_reg_841[1:0] <= 2'b00;
end

endmodule //matrix_mult
