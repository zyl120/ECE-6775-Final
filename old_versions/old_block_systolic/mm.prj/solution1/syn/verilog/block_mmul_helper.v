// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module block_mmul_helper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_q0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        out_r_q1,
        ii,
        jj
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
output  [13:0] A_address1;
output   A_ce1;
input  [15:0] A_q1;
output  [13:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
output  [13:0] B_address1;
output   B_ce1;
input  [15:0] B_q1;
output  [13:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [15:0] out_r_d0;
input  [15:0] out_r_q0;
output  [13:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [15:0] out_r_d1;
input  [15:0] out_r_q1;
input  [6:0] ii;
input  [6:0] jj;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg[13:0] A_address1;
reg A_ce1;
reg[13:0] B_address0;
reg B_ce0;
reg[13:0] B_address1;
reg B_ce1;
reg[13:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[15:0] out_r_d0;
reg[13:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;
reg[15:0] out_r_d1;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_286;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln14_reg_1042;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [15:0] reg_290;
wire   [0:0] icmp_ln15_fu_308_p2;
reg   [0:0] icmp_ln15_reg_879;
wire   [13:0] mul_ln15_fu_318_p2;
reg   [13:0] mul_ln15_reg_884;
wire   [13:0] zext_ln18_fu_324_p1;
reg   [13:0] zext_ln18_reg_889;
reg   [13:0] out_addr_reg_894;
wire   [0:0] icmp_ln16_fu_345_p2;
reg   [0:0] icmp_ln16_reg_899;
wire   [13:0] zext_ln18_2_fu_351_p1;
reg   [13:0] zext_ln18_2_reg_904;
reg   [13:0] out_addr_1_reg_909;
wire   [0:0] icmp_ln16_1_fu_372_p2;
reg   [0:0] icmp_ln16_1_reg_914;
wire   [13:0] zext_ln18_4_fu_378_p1;
reg   [13:0] zext_ln18_4_reg_919;
reg   [13:0] out_addr_2_reg_924;
wire   [0:0] icmp_ln16_2_fu_399_p2;
reg   [0:0] icmp_ln16_2_reg_929;
wire   [13:0] zext_ln18_6_fu_405_p1;
reg   [13:0] zext_ln18_6_reg_934;
reg   [13:0] out_addr_3_reg_939;
wire   [0:0] icmp_ln15_1_fu_426_p2;
reg   [0:0] icmp_ln15_1_reg_944;
wire   [13:0] mul_ln15_1_fu_436_p2;
reg   [13:0] mul_ln15_1_reg_949;
reg   [13:0] out_addr_4_reg_954;
reg   [13:0] out_addr_5_reg_959;
reg   [13:0] out_addr_6_reg_964;
reg   [13:0] out_addr_7_reg_969;
wire   [0:0] icmp_ln15_2_fu_492_p2;
reg   [0:0] icmp_ln15_2_reg_974;
wire   [13:0] mul_ln15_2_fu_502_p2;
reg   [13:0] mul_ln15_2_reg_979;
reg   [13:0] out_addr_8_reg_984;
reg   [13:0] out_addr_9_reg_989;
reg   [13:0] out_addr_10_reg_994;
reg   [13:0] out_addr_11_reg_999;
wire   [0:0] icmp_ln15_3_fu_558_p2;
reg   [0:0] icmp_ln15_3_reg_1004;
wire   [13:0] mul_ln15_3_fu_568_p2;
reg   [13:0] mul_ln15_3_reg_1009;
reg   [13:0] out_addr_12_reg_1014;
reg   [13:0] out_addr_13_reg_1019;
reg   [13:0] out_addr_14_reg_1024;
reg   [13:0] out_addr_15_reg_1029;
wire   [6:0] k_fu_624_p2;
reg   [6:0] k_reg_1037;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_630_p2;
wire   [0:0] icmp_ln10_fu_618_p2;
wire   [13:0] add_ln15_5_fu_660_p2;
reg   [13:0] add_ln15_5_reg_1060;
wire   [13:0] add_ln15_6_fu_665_p2;
reg   [13:0] add_ln15_6_reg_1065;
wire   [13:0] add_ln16_5_fu_690_p2;
reg   [13:0] add_ln16_5_reg_1080;
wire   [13:0] add_ln16_6_fu_695_p2;
reg   [13:0] add_ln16_6_reg_1085;
wire  signed [15:0] select_ln15_fu_716_p3;
reg  signed [15:0] select_ln15_reg_1110;
reg  signed [15:0] B_load_reg_1118;
wire  signed [15:0] select_ln16_fu_723_p3;
reg  signed [15:0] select_ln16_reg_1126;
wire  signed [15:0] select_ln15_1_fu_730_p3;
reg  signed [15:0] select_ln15_1_reg_1134;
wire  signed [15:0] grp_fu_785_p3;
reg  signed [15:0] add_ln17_reg_1142;
wire  signed [15:0] grp_fu_791_p3;
reg  signed [15:0] add_ln17_1_reg_1147;
wire  signed [15:0] select_ln16_1_fu_737_p3;
reg  signed [15:0] select_ln16_1_reg_1152;
wire  signed [15:0] select_ln16_2_fu_744_p3;
reg  signed [15:0] select_ln16_2_reg_1160;
wire  signed [15:0] select_ln15_2_fu_751_p3;
reg  signed [15:0] select_ln15_2_reg_1168;
wire  signed [15:0] select_ln15_3_fu_758_p3;
reg  signed [15:0] select_ln15_3_reg_1176;
wire  signed [15:0] grp_fu_797_p3;
reg  signed [15:0] add_ln17_2_reg_1184;
wire  signed [15:0] grp_fu_803_p3;
reg  signed [15:0] add_ln17_3_reg_1189;
wire  signed [15:0] grp_fu_809_p3;
reg  signed [15:0] add_ln17_4_reg_1194;
wire  signed [15:0] grp_fu_815_p3;
reg  signed [15:0] add_ln17_5_reg_1199;
wire  signed [15:0] grp_fu_821_p3;
reg  signed [15:0] add_ln17_6_reg_1204;
wire  signed [15:0] grp_fu_827_p3;
reg  signed [15:0] add_ln17_7_reg_1209;
wire  signed [15:0] grp_fu_833_p3;
reg  signed [15:0] add_ln17_8_reg_1214;
wire  signed [15:0] grp_fu_839_p3;
reg  signed [15:0] add_ln17_9_reg_1219;
wire  signed [15:0] grp_fu_845_p3;
reg  signed [15:0] add_ln17_10_reg_1224;
wire  signed [15:0] grp_fu_851_p3;
reg  signed [15:0] add_ln17_11_reg_1229;
wire  signed [15:0] grp_fu_857_p3;
reg  signed [15:0] add_ln17_12_reg_1234;
wire    ap_CS_fsm_state10;
wire  signed [15:0] grp_fu_863_p3;
reg  signed [15:0] add_ln17_13_reg_1239;
wire   [15:0] select_ln14_14_fu_765_p3;
reg   [15:0] select_ln14_14_reg_1244;
wire   [15:0] select_ln14_15_fu_772_p3;
reg   [15:0] select_ln14_15_reg_1249;
wire  signed [15:0] grp_fu_869_p3;
reg  signed [15:0] add_ln17_14_reg_1254;
wire    ap_CS_fsm_state11;
wire  signed [15:0] grp_fu_874_p3;
reg  signed [15:0] add_ln17_15_reg_1259;
wire   [13:0] add_ln16_7_fu_779_p2;
wire    ap_CS_fsm_state17;
reg   [6:0] k_0_reg_263;
reg   [13:0] phi_mul_reg_274;
wire   [63:0] zext_ln18_1_fu_334_p1;
wire   [63:0] zext_ln18_3_fu_361_p1;
wire   [63:0] zext_ln18_5_fu_388_p1;
wire   [63:0] zext_ln18_7_fu_415_p1;
wire   [63:0] zext_ln18_8_fu_448_p1;
wire   [63:0] zext_ln18_9_fu_459_p1;
wire   [63:0] zext_ln18_10_fu_470_p1;
wire   [63:0] zext_ln18_11_fu_481_p1;
wire   [63:0] zext_ln18_12_fu_514_p1;
wire   [63:0] zext_ln18_13_fu_525_p1;
wire   [63:0] zext_ln18_14_fu_536_p1;
wire   [63:0] zext_ln18_15_fu_547_p1;
wire   [63:0] zext_ln18_16_fu_580_p1;
wire   [63:0] zext_ln18_17_fu_591_p1;
wire   [63:0] zext_ln18_18_fu_602_p1;
wire   [63:0] zext_ln18_19_fu_613_p1;
wire   [63:0] zext_ln15_5_fu_645_p1;
wire   [63:0] zext_ln15_6_fu_655_p1;
wire   [63:0] zext_ln16_fu_675_p1;
wire   [63:0] zext_ln16_1_fu_685_p1;
wire   [63:0] zext_ln15_7_fu_700_p1;
wire   [63:0] zext_ln15_8_fu_704_p1;
wire   [63:0] zext_ln16_2_fu_708_p1;
wire   [63:0] zext_ln16_3_fu_712_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [6:0] mul_ln15_fu_318_p0;
wire   [13:0] add_ln18_fu_328_p2;
wire   [6:0] add_ln16_fu_339_p2;
wire   [13:0] add_ln18_1_fu_355_p2;
wire   [6:0] add_ln16_1_fu_366_p2;
wire   [13:0] add_ln18_2_fu_382_p2;
wire   [6:0] add_ln16_2_fu_393_p2;
wire   [13:0] add_ln18_3_fu_409_p2;
wire   [6:0] add_ln15_fu_420_p2;
wire   [6:0] mul_ln15_1_fu_436_p0;
wire   [13:0] add_ln18_4_fu_442_p2;
wire   [13:0] add_ln18_5_fu_453_p2;
wire   [13:0] add_ln18_6_fu_464_p2;
wire   [13:0] add_ln18_7_fu_475_p2;
wire   [6:0] add_ln15_1_fu_486_p2;
wire   [6:0] mul_ln15_2_fu_502_p0;
wire   [13:0] add_ln18_8_fu_508_p2;
wire   [13:0] add_ln18_9_fu_519_p2;
wire   [13:0] add_ln18_10_fu_530_p2;
wire   [13:0] add_ln18_11_fu_541_p2;
wire   [6:0] add_ln15_2_fu_552_p2;
wire   [6:0] mul_ln15_3_fu_568_p0;
wire   [13:0] add_ln18_12_fu_574_p2;
wire   [13:0] add_ln18_13_fu_585_p2;
wire   [13:0] add_ln18_14_fu_596_p2;
wire   [13:0] add_ln18_15_fu_607_p2;
wire   [13:0] zext_ln15_4_fu_636_p1;
wire   [13:0] add_ln15_3_fu_640_p2;
wire   [13:0] add_ln15_4_fu_650_p2;
wire   [13:0] add_ln16_3_fu_670_p2;
wire   [13:0] add_ln16_4_fu_680_p2;
wire   [15:0] grp_fu_294_p3;
wire   [15:0] grp_fu_301_p3;
wire    ap_CS_fsm_state18;
reg   [17:0] ap_NS_fsm;
wire   [13:0] mul_ln15_1_fu_436_p00;
wire   [13:0] mul_ln15_2_fu_502_p00;
wire   [13:0] mul_ln15_3_fu_568_p00;
wire   [13:0] mul_ln15_fu_318_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U1(
    .din0(select_ln15_reg_1110),
    .din1(B_load_reg_1118),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_785_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U2(
    .din0(select_ln15_reg_1110),
    .din1(select_ln16_reg_1126),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_791_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U3(
    .din0(select_ln15_reg_1110),
    .din1(select_ln16_1_reg_1152),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_797_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U4(
    .din0(select_ln15_reg_1110),
    .din1(select_ln16_2_reg_1160),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_803_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U5(
    .din0(select_ln15_1_reg_1134),
    .din1(B_load_reg_1118),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_809_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U6(
    .din0(select_ln15_1_reg_1134),
    .din1(select_ln16_reg_1126),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_815_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U7(
    .din0(select_ln15_1_reg_1134),
    .din1(select_ln16_1_reg_1152),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_821_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U8(
    .din0(select_ln15_1_reg_1134),
    .din1(select_ln16_2_reg_1160),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_827_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U9(
    .din0(select_ln15_2_reg_1168),
    .din1(B_load_reg_1118),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_833_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U10(
    .din0(select_ln15_2_reg_1168),
    .din1(select_ln16_reg_1126),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_839_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U11(
    .din0(select_ln15_2_reg_1168),
    .din1(select_ln16_1_reg_1152),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_845_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U12(
    .din0(select_ln15_2_reg_1168),
    .din1(select_ln16_2_reg_1160),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_851_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U13(
    .din0(select_ln15_3_reg_1176),
    .din1(B_load_reg_1118),
    .din2(grp_fu_294_p3),
    .dout(grp_fu_857_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U14(
    .din0(select_ln15_3_reg_1176),
    .din1(select_ln16_reg_1126),
    .din2(grp_fu_301_p3),
    .dout(grp_fu_863_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U15(
    .din0(select_ln15_3_reg_1176),
    .din1(select_ln16_1_reg_1152),
    .din2(select_ln14_14_reg_1244),
    .dout(grp_fu_869_p3)
);

block_mmul_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
block_mmul_mac_mubkb_U16(
    .din0(select_ln15_3_reg_1176),
    .din1(select_ln16_2_reg_1160),
    .din2(select_ln14_15_reg_1249),
    .dout(grp_fu_874_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k_0_reg_263 <= k_reg_1037;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_263 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_mul_reg_274 <= add_ln16_7_fu_779_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_274 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_load_reg_1118 <= B_q0;
        select_ln15_1_reg_1134 <= select_ln15_1_fu_730_p3;
        select_ln15_reg_1110 <= select_ln15_fu_716_p3;
        select_ln16_reg_1126 <= select_ln16_fu_723_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln15_2_reg_974 == 1'd1))) begin
        add_ln15_5_reg_1060 <= add_ln15_5_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln15_3_reg_1004 == 1'd1))) begin
        add_ln15_6_reg_1065 <= add_ln15_6_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln16_1_reg_914 == 1'd1))) begin
        add_ln16_5_reg_1080 <= add_ln16_5_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln16_2_reg_929 == 1'd1))) begin
        add_ln16_6_reg_1085 <= add_ln16_6_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln17_10_reg_1224 <= grp_fu_845_p3;
        add_ln17_11_reg_1229 <= grp_fu_851_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln17_12_reg_1234 <= grp_fu_857_p3;
        add_ln17_13_reg_1239 <= grp_fu_863_p3;
        select_ln14_14_reg_1244 <= select_ln14_14_fu_765_p3;
        select_ln14_15_reg_1249 <= select_ln14_15_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln17_14_reg_1254 <= grp_fu_869_p3;
        add_ln17_15_reg_1259 <= grp_fu_874_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln17_1_reg_1147 <= grp_fu_791_p3;
        add_ln17_reg_1142 <= grp_fu_785_p3;
        select_ln15_2_reg_1168 <= select_ln15_2_fu_751_p3;
        select_ln15_3_reg_1176 <= select_ln15_3_fu_758_p3;
        select_ln16_1_reg_1152 <= select_ln16_1_fu_737_p3;
        select_ln16_2_reg_1160 <= select_ln16_2_fu_744_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln17_2_reg_1184 <= grp_fu_797_p3;
        add_ln17_3_reg_1189 <= grp_fu_803_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln17_4_reg_1194 <= grp_fu_809_p3;
        add_ln17_5_reg_1199 <= grp_fu_815_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln17_6_reg_1204 <= grp_fu_821_p3;
        add_ln17_7_reg_1209 <= grp_fu_827_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln17_8_reg_1214 <= grp_fu_833_p3;
        add_ln17_9_reg_1219 <= grp_fu_839_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln14_reg_1042 <= icmp_ln14_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln15_1_reg_944 <= icmp_ln15_1_fu_426_p2;
        icmp_ln15_2_reg_974 <= icmp_ln15_2_fu_492_p2;
        icmp_ln15_3_reg_1004 <= icmp_ln15_3_fu_558_p2;
        icmp_ln15_reg_879 <= icmp_ln15_fu_308_p2;
        icmp_ln16_1_reg_914 <= icmp_ln16_1_fu_372_p2;
        icmp_ln16_2_reg_929 <= icmp_ln16_2_fu_399_p2;
        icmp_ln16_reg_899 <= icmp_ln16_fu_345_p2;
        mul_ln15_1_reg_949[13 : 2] <= mul_ln15_1_fu_436_p2[13 : 2];
        mul_ln15_2_reg_979[13 : 2] <= mul_ln15_2_fu_502_p2[13 : 2];
        mul_ln15_3_reg_1009[13 : 2] <= mul_ln15_3_fu_568_p2[13 : 2];
        mul_ln15_reg_884[13 : 2] <= mul_ln15_fu_318_p2[13 : 2];
        out_addr_10_reg_994 <= zext_ln18_14_fu_536_p1;
        out_addr_11_reg_999 <= zext_ln18_15_fu_547_p1;
        out_addr_12_reg_1014 <= zext_ln18_16_fu_580_p1;
        out_addr_13_reg_1019 <= zext_ln18_17_fu_591_p1;
        out_addr_14_reg_1024 <= zext_ln18_18_fu_602_p1;
        out_addr_15_reg_1029 <= zext_ln18_19_fu_613_p1;
        out_addr_1_reg_909 <= zext_ln18_3_fu_361_p1;
        out_addr_2_reg_924 <= zext_ln18_5_fu_388_p1;
        out_addr_3_reg_939 <= zext_ln18_7_fu_415_p1;
        out_addr_4_reg_954 <= zext_ln18_8_fu_448_p1;
        out_addr_5_reg_959 <= zext_ln18_9_fu_459_p1;
        out_addr_6_reg_964 <= zext_ln18_10_fu_470_p1;
        out_addr_7_reg_969 <= zext_ln18_11_fu_481_p1;
        out_addr_8_reg_984 <= zext_ln18_12_fu_514_p1;
        out_addr_9_reg_989 <= zext_ln18_13_fu_525_p1;
        out_addr_reg_894 <= zext_ln18_1_fu_334_p1;
        zext_ln18_2_reg_904[6 : 0] <= zext_ln18_2_fu_351_p1[6 : 0];
        zext_ln18_4_reg_919[6 : 0] <= zext_ln18_4_fu_378_p1[6 : 0];
        zext_ln18_6_reg_934[6 : 0] <= zext_ln18_6_fu_405_p1[6 : 0];
        zext_ln18_reg_889[6 : 0] <= zext_ln18_fu_324_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_1037 <= k_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln14_reg_1042 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_286 <= out_r_q0;
        reg_290 <= out_r_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = zext_ln15_7_fu_700_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln15_5_fu_645_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = zext_ln15_8_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = zext_ln15_6_fu_655_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = zext_ln16_2_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address0 = zext_ln16_fu_675_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address1 = zext_ln16_3_fu_712_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address1 = zext_ln16_1_fu_685_p1;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        out_r_address0 = out_addr_14_reg_1024;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        out_r_address0 = out_addr_12_reg_1014;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_address0 = out_addr_10_reg_994;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state14))) begin
        out_r_address0 = out_addr_8_reg_984;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state13))) begin
        out_r_address0 = out_addr_6_reg_964;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        out_r_address0 = out_addr_4_reg_954;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        out_r_address0 = out_addr_2_reg_924;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_address0 = out_addr_reg_894;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        out_r_address1 = out_addr_15_reg_1029;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        out_r_address1 = out_addr_13_reg_1019;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_address1 = out_addr_11_reg_999;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state14))) begin
        out_r_address1 = out_addr_9_reg_989;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state13))) begin
        out_r_address1 = out_addr_7_reg_969;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        out_r_address1 = out_addr_5_reg_959;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11))) begin
        out_r_address1 = out_addr_3_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_address1 = out_addr_1_reg_909;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_r_d0 = add_ln17_14_reg_1254;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_r_d0 = add_ln17_12_reg_1234;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_r_d0 = add_ln17_10_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_r_d0 = add_ln17_8_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_d0 = add_ln17_6_reg_1204;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_d0 = add_ln17_4_reg_1194;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_r_d0 = add_ln17_2_reg_1184;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_r_d0 = add_ln17_reg_1142;
    end else begin
        out_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        out_r_d1 = add_ln17_15_reg_1259;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_r_d1 = add_ln17_13_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_r_d1 = add_ln17_11_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_r_d1 = add_ln17_9_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_r_d1 = add_ln17_7_reg_1209;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_d1 = add_ln17_5_reg_1199;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_r_d1 = add_ln17_3_reg_1189;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_r_d1 = add_ln17_1_reg_1147;
    end else begin
        out_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_618_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_486_p2 = (ii + 7'd2);

assign add_ln15_2_fu_552_p2 = (ii + 7'd3);

assign add_ln15_3_fu_640_p2 = (mul_ln15_reg_884 + zext_ln15_4_fu_636_p1);

assign add_ln15_4_fu_650_p2 = (mul_ln15_1_reg_949 + zext_ln15_4_fu_636_p1);

assign add_ln15_5_fu_660_p2 = (mul_ln15_2_reg_979 + zext_ln15_4_fu_636_p1);

assign add_ln15_6_fu_665_p2 = (mul_ln15_3_reg_1009 + zext_ln15_4_fu_636_p1);

assign add_ln15_fu_420_p2 = (ii + 7'd1);

assign add_ln16_1_fu_366_p2 = (jj + 7'd2);

assign add_ln16_2_fu_393_p2 = (jj + 7'd3);

assign add_ln16_3_fu_670_p2 = (phi_mul_reg_274 + zext_ln18_reg_889);

assign add_ln16_4_fu_680_p2 = (phi_mul_reg_274 + zext_ln18_2_reg_904);

assign add_ln16_5_fu_690_p2 = (phi_mul_reg_274 + zext_ln18_4_reg_919);

assign add_ln16_6_fu_695_p2 = (phi_mul_reg_274 + zext_ln18_6_reg_934);

assign add_ln16_7_fu_779_p2 = (phi_mul_reg_274 + 14'd100);

assign add_ln16_fu_339_p2 = (jj + 7'd1);

assign add_ln18_10_fu_530_p2 = (mul_ln15_2_fu_502_p2 + zext_ln18_4_fu_378_p1);

assign add_ln18_11_fu_541_p2 = (mul_ln15_2_fu_502_p2 + zext_ln18_6_fu_405_p1);

assign add_ln18_12_fu_574_p2 = (mul_ln15_3_fu_568_p2 + zext_ln18_fu_324_p1);

assign add_ln18_13_fu_585_p2 = (mul_ln15_3_fu_568_p2 + zext_ln18_2_fu_351_p1);

assign add_ln18_14_fu_596_p2 = (mul_ln15_3_fu_568_p2 + zext_ln18_4_fu_378_p1);

assign add_ln18_15_fu_607_p2 = (mul_ln15_3_fu_568_p2 + zext_ln18_6_fu_405_p1);

assign add_ln18_1_fu_355_p2 = (mul_ln15_fu_318_p2 + zext_ln18_2_fu_351_p1);

assign add_ln18_2_fu_382_p2 = (mul_ln15_fu_318_p2 + zext_ln18_4_fu_378_p1);

assign add_ln18_3_fu_409_p2 = (mul_ln15_fu_318_p2 + zext_ln18_6_fu_405_p1);

assign add_ln18_4_fu_442_p2 = (mul_ln15_1_fu_436_p2 + zext_ln18_fu_324_p1);

assign add_ln18_5_fu_453_p2 = (mul_ln15_1_fu_436_p2 + zext_ln18_2_fu_351_p1);

assign add_ln18_6_fu_464_p2 = (mul_ln15_1_fu_436_p2 + zext_ln18_4_fu_378_p1);

assign add_ln18_7_fu_475_p2 = (mul_ln15_1_fu_436_p2 + zext_ln18_6_fu_405_p1);

assign add_ln18_8_fu_508_p2 = (mul_ln15_2_fu_502_p2 + zext_ln18_fu_324_p1);

assign add_ln18_9_fu_519_p2 = (mul_ln15_2_fu_502_p2 + zext_ln18_2_fu_351_p1);

assign add_ln18_fu_328_p2 = (mul_ln15_fu_318_p2 + zext_ln18_fu_324_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_294_p3 = ((icmp_ln14_reg_1042[0:0] === 1'b1) ? 16'd0 : reg_286);

assign grp_fu_301_p3 = ((icmp_ln14_reg_1042[0:0] === 1'b1) ? 16'd0 : reg_290);

assign icmp_ln10_fu_618_p2 = ((k_0_reg_263 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_630_p2 = ((k_0_reg_263 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_426_p2 = ((add_ln15_fu_420_p2 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln15_2_fu_492_p2 = ((add_ln15_1_fu_486_p2 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln15_3_fu_558_p2 = ((add_ln15_2_fu_552_p2 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_308_p2 = ((ii < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_372_p2 = ((add_ln16_1_fu_366_p2 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln16_2_fu_399_p2 = ((add_ln16_2_fu_393_p2 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_345_p2 = ((add_ln16_fu_339_p2 < 7'd100) ? 1'b1 : 1'b0);

assign k_fu_624_p2 = (k_0_reg_263 + 7'd1);

assign mul_ln15_1_fu_436_p0 = mul_ln15_1_fu_436_p00;

assign mul_ln15_1_fu_436_p00 = add_ln15_fu_420_p2;

assign mul_ln15_1_fu_436_p2 = (mul_ln15_1_fu_436_p0 * $signed('h64));

assign mul_ln15_2_fu_502_p0 = mul_ln15_2_fu_502_p00;

assign mul_ln15_2_fu_502_p00 = add_ln15_1_fu_486_p2;

assign mul_ln15_2_fu_502_p2 = (mul_ln15_2_fu_502_p0 * $signed('h64));

assign mul_ln15_3_fu_568_p0 = mul_ln15_3_fu_568_p00;

assign mul_ln15_3_fu_568_p00 = add_ln15_2_fu_552_p2;

assign mul_ln15_3_fu_568_p2 = (mul_ln15_3_fu_568_p0 * $signed('h64));

assign mul_ln15_fu_318_p0 = mul_ln15_fu_318_p00;

assign mul_ln15_fu_318_p00 = ii;

assign mul_ln15_fu_318_p2 = (mul_ln15_fu_318_p0 * $signed('h64));

assign select_ln14_14_fu_765_p3 = ((icmp_ln14_reg_1042[0:0] === 1'b1) ? 16'd0 : out_r_q0);

assign select_ln14_15_fu_772_p3 = ((icmp_ln14_reg_1042[0:0] === 1'b1) ? 16'd0 : out_r_q1);

assign select_ln15_1_fu_730_p3 = ((icmp_ln15_1_reg_944[0:0] === 1'b1) ? A_q1 : 16'd0);

assign select_ln15_2_fu_751_p3 = ((icmp_ln15_2_reg_974[0:0] === 1'b1) ? A_q0 : 16'd0);

assign select_ln15_3_fu_758_p3 = ((icmp_ln15_3_reg_1004[0:0] === 1'b1) ? A_q1 : 16'd0);

assign select_ln15_fu_716_p3 = ((icmp_ln15_reg_879[0:0] === 1'b1) ? A_q0 : 16'd0);

assign select_ln16_1_fu_737_p3 = ((icmp_ln16_1_reg_914[0:0] === 1'b1) ? B_q0 : 16'd0);

assign select_ln16_2_fu_744_p3 = ((icmp_ln16_2_reg_929[0:0] === 1'b1) ? B_q1 : 16'd0);

assign select_ln16_fu_723_p3 = ((icmp_ln16_reg_899[0:0] === 1'b1) ? B_q1 : 16'd0);

assign zext_ln15_4_fu_636_p1 = k_0_reg_263;

assign zext_ln15_5_fu_645_p1 = add_ln15_3_fu_640_p2;

assign zext_ln15_6_fu_655_p1 = add_ln15_4_fu_650_p2;

assign zext_ln15_7_fu_700_p1 = add_ln15_5_reg_1060;

assign zext_ln15_8_fu_704_p1 = add_ln15_6_reg_1065;

assign zext_ln16_1_fu_685_p1 = add_ln16_4_fu_680_p2;

assign zext_ln16_2_fu_708_p1 = add_ln16_5_reg_1080;

assign zext_ln16_3_fu_712_p1 = add_ln16_6_reg_1085;

assign zext_ln16_fu_675_p1 = add_ln16_3_fu_670_p2;

assign zext_ln18_10_fu_470_p1 = add_ln18_6_fu_464_p2;

assign zext_ln18_11_fu_481_p1 = add_ln18_7_fu_475_p2;

assign zext_ln18_12_fu_514_p1 = add_ln18_8_fu_508_p2;

assign zext_ln18_13_fu_525_p1 = add_ln18_9_fu_519_p2;

assign zext_ln18_14_fu_536_p1 = add_ln18_10_fu_530_p2;

assign zext_ln18_15_fu_547_p1 = add_ln18_11_fu_541_p2;

assign zext_ln18_16_fu_580_p1 = add_ln18_12_fu_574_p2;

assign zext_ln18_17_fu_591_p1 = add_ln18_13_fu_585_p2;

assign zext_ln18_18_fu_602_p1 = add_ln18_14_fu_596_p2;

assign zext_ln18_19_fu_613_p1 = add_ln18_15_fu_607_p2;

assign zext_ln18_1_fu_334_p1 = add_ln18_fu_328_p2;

assign zext_ln18_2_fu_351_p1 = add_ln16_fu_339_p2;

assign zext_ln18_3_fu_361_p1 = add_ln18_1_fu_355_p2;

assign zext_ln18_4_fu_378_p1 = add_ln16_1_fu_366_p2;

assign zext_ln18_5_fu_388_p1 = add_ln18_2_fu_382_p2;

assign zext_ln18_6_fu_405_p1 = add_ln16_2_fu_393_p2;

assign zext_ln18_7_fu_415_p1 = add_ln18_3_fu_409_p2;

assign zext_ln18_8_fu_448_p1 = add_ln18_4_fu_442_p2;

assign zext_ln18_9_fu_459_p1 = add_ln18_5_fu_453_p2;

assign zext_ln18_fu_324_p1 = jj;

always @ (posedge ap_clk) begin
    mul_ln15_reg_884[1:0] <= 2'b00;
    zext_ln18_reg_889[13:7] <= 7'b0000000;
    zext_ln18_2_reg_904[13:7] <= 7'b0000000;
    zext_ln18_4_reg_919[13:7] <= 7'b0000000;
    zext_ln18_6_reg_934[13:7] <= 7'b0000000;
    mul_ln15_1_reg_949[1:0] <= 2'b00;
    mul_ln15_2_reg_979[1:0] <= 2'b00;
    mul_ln15_3_reg_1009[1:0] <= 2'b00;
end

endmodule //block_mmul_helper
