// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _block_mmul_HH_
#define _block_mmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "block_mmul_helper.h"

namespace ap_rtl {

struct block_mmul : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<16> > A_q0;
    sc_out< sc_lv<14> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_in< sc_lv<16> > A_q1;
    sc_out< sc_lv<14> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<16> > B_q0;
    sc_out< sc_lv<14> > B_address1;
    sc_out< sc_logic > B_ce1;
    sc_in< sc_lv<16> > B_q1;
    sc_out< sc_lv<14> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<16> > out_r_d0;
    sc_in< sc_lv<16> > out_r_q0;
    sc_out< sc_lv<14> > out_r_address1;
    sc_out< sc_logic > out_r_ce1;
    sc_out< sc_logic > out_r_we1;
    sc_out< sc_lv<16> > out_r_d1;
    sc_in< sc_lv<16> > out_r_q1;


    // Module declarations
    block_mmul(sc_module_name name);
    SC_HAS_PROCESS(block_mmul);

    ~block_mmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    block_mmul_helper* grp_block_mmul_helper_fu_48;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > jj_fu_74_p2;
    sc_signal< sc_lv<7> > jj_reg_92;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln30_fu_68_p2;
    sc_signal< sc_lv<7> > ii_fu_80_p2;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_ap_start;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_ap_done;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_ap_idle;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_ap_ready;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_A_address0;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_A_ce0;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_A_address1;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_A_ce1;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_B_address0;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_B_ce0;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_B_address1;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_B_ce1;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_out_r_address0;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_out_r_ce0;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_out_r_we0;
    sc_signal< sc_lv<16> > grp_block_mmul_helper_fu_48_out_r_d0;
    sc_signal< sc_lv<14> > grp_block_mmul_helper_fu_48_out_r_address1;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_out_r_ce1;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_out_r_we1;
    sc_signal< sc_lv<16> > grp_block_mmul_helper_fu_48_out_r_d1;
    sc_signal< sc_lv<7> > ii_0_reg_24;
    sc_signal< sc_lv<7> > jj_0_reg_36;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln29_fu_62_p2;
    sc_signal< sc_logic > grp_block_mmul_helper_fu_48_ap_start_reg;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_B_address0();
    void thread_B_address1();
    void thread_B_ce0();
    void thread_B_ce1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_block_mmul_helper_fu_48_ap_start();
    void thread_icmp_ln29_fu_62_p2();
    void thread_icmp_ln30_fu_68_p2();
    void thread_ii_fu_80_p2();
    void thread_jj_fu_74_p2();
    void thread_out_r_address0();
    void thread_out_r_address1();
    void thread_out_r_ce0();
    void thread_out_r_ce1();
    void thread_out_r_d0();
    void thread_out_r_d1();
    void thread_out_r_we0();
    void thread_out_r_we1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
